{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-HTTP","result":{"data":{"markdownRemark":{"id":"937586aa-98cc-5ef9-a665-372e9498465f","html":"<h1 id=\"http\" style=\"position:relative;\"><a href=\"#http\" aria-label=\"http permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP</h1>\n<h2 id=\"http란\" style=\"position:relative;\"><a href=\"#http%EB%9E%80\" aria-label=\"http란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP란?</h2>\n<p>http : hypertext tranfer protocol의 약자로 HTML을 전송할때 공통된 규칙에 의해 서로 원할한 소통을 하기위해 만들어진 통신 규약이다.\n예를 들면 말을 하게되면 서로가 알아들을 수 있어야 하지 않은가 말은 어떻게 하는가? 그냥 소리만 지른다고 알수는 없다. 한국어, 영어, 프랑스어 등 정해진 규칙, 문법에 따라 말해야할 것이다 HTML의 통신도 이와 비슷하다고 보면 된다.</p>\n<p>즉 대상이 server가되고 server끼리는 공통의 언어로 말한다고 생각하면된다. </p>\n<p>http에는 받는대상, 제목 , 주소, 내용, 보내는 대상들이 들어가있어 마치 편지와 비슷하다고 볼 수있다.</p>\n<p>HTTP는 TCP/IP의 기반위에 만들어져 있다.</p>\n<h2 id=\"http의-핵심요소\" style=\"position:relative;\"><a href=\"#http%EC%9D%98-%ED%95%B5%EC%8B%AC%EC%9A%94%EC%86%8C\" aria-label=\"http의 핵심요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP의 핵심요소</h2>\n<p>HTTP에는 2가지 큰 특징이 있다.</p>\n<ol>\n<li>\n<p>HTTP는 기본적으로 요청/응답(request/response)구조로 되어있다.</p>\n<ul>\n<li>클라이언트가 rquest를 보내면 서버는 responser를 보내는 구조다</li>\n<li>모든 통신이 요청과 응답으로 이루어 진다.</li>\n</ul>\n</li>\n<li>HTTP는 Stateless 이다.\n말 그대로 상태를 저장하지 않는다는 뜻으로 독립적인 통신을 하므로 현재 이루어진 통신은 이전의 통신을 기억하지 못한다\n즉 내가 내용을 보내서 인증 처리했더라도 이 통신이 끝나면 그것으로 끝이다 지속적으로 유지하려고 해도 다시 인증시켜 주어야한다.\n대표적인 예로는 로그인이 있다 로그인은 로그인에 필요한 id / password를 서버에 보내고 인증을 받은 뒤 통신을 끝내면 끝이다 Stateless임으로 통신내용을 저장하지 않기 때문이다. 그래서 지속적인 로그인 정보를 요구 할것이다. 그래서 쿠키나 세션이라는 곳에 로그인 정보(토큰값)을 저장하여 요청에 대한 정보를 담고있다가 매 통신시 HTTP header나 body에 첨부하여 보내게된다. (이러한 정보는 성격상 header에 붙는게 맞다)</li>\n</ol>\n<h2 id=\"http의-구조\" style=\"position:relative;\"><a href=\"#http%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"http의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP의 구조</h2>\n<p>HTTP는 request(요청), respose(응답) 2가지 경우가 있고 2가지 경우는 각각 3부분으로 구성되어 있다.</p>\n<h3 id=\"http-request-메시지\" style=\"position:relative;\"><a href=\"#http-request-%EB%A9%94%EC%8B%9C%EC%A7%80\" aria-label=\"http request 메시지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Request 메시지</h3>\n<ul>\n<li>status line</li>\n<li>headers</li>\n<li>body\nRequest의 큰 구조이다</li>\n<li>\n<p>status line</p>\n<ul>\n<li>HTTP Method\n요청의 행동을 정의한다. (get-데이터 줘, post - 데이터 생성해)</li>\n<li>Request target\n보낼 주소로 uri를 말하며 큰 주소뒤에 붙는 상세주소라고 보면 쉽다.\n(ex : www.tset.com/login <code class=\"language-text\">/login</code>부분이라고 보면된다.)</li>\n<li>\n<p>http viersion\nhttp의 버전 주로 1.1대를 사용 중이고 간혹 2사용하긴한다, 현재 3버전까지 나옴</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token property\">GET</span> /search HTTP/1.1</span></code></pre></div>\n<p>위와 같은 형태가 된다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Headers</p>\n<ul>\n<li>메타정보, 요청에대한 부가정보로 되어있음, key:value의 형태로 되어있다.</li>\n<li>Headers도 크게 3부분으로 나뉘어진다.(general headers, request headers, entity headers) </li>\n<li>\n<p>자주 사용되는 header 정보들이 있다.</p>\n<ul>\n<li>host : google.com / 김 아파트 라는 아파트로 가야함 근데 어디로 가는지 모름(동면읍, 몇동, 몇호) 그래서 status line의 target이 알려준다.</li>\n</ul>\n</li>\n<li>User-Agent : 클라이언트 정보 담김</li>\n<li>Connection : 요청 끝난후 클라이언트와 서버 계속 연결 유지할지 여부</li>\n<li>Content-Type : 해당 요청이 보내는 메세지 body의 타입. 예를 들어, JSON을 보내면 application/jso</li>\n<li>Content-Length: 메세지 body의 길이</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header-name keyword\">Accept:</span> */*\n<span class=\"token header-name keyword\">Accept-Encoding:</span> gzip, deflate\n<span class=\"token header-name keyword\">Connection:</span> keep-alive\n<span class=\"token header-name keyword\">Content-Type:</span> application/json\n<span class=\"token header-name keyword\">Content-Length:</span> 257\n<span class=\"token header-name keyword\">Host:</span> google.com\n<span class=\"token header-name keyword\">User-Agent:</span> HTTPie/0.9.3</code></pre></div>\n<ol start=\"3\">\n<li>\n<p>body</p>\n<ul>\n<li>해당 reqeust의 실제 내용들이 담긴다.</li>\n<li>Body가 없는 request도 많은데 GET 요청이 보통 정보를 요구하기 때문에 내용이 없는 경우가 많다.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\">{\n    \"imp_uid\": \"imp_1234567890\",\n    \"merchant_uid\": \"order_id_8237352\",\n    \"status\": \"paid\"\n}</code></pre></div>\n<h3 id=\"http-response-구조\" style=\"position:relative;\"><a href=\"#http-response-%EA%B5%AC%EC%A1%B0\" aria-label=\"http response 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Response 구조</h3>\n<ul>\n<li>Status line</li>\n<li>Headers</li>\n<li>Body\nResponse의 큰 구조이다. Request와 비슷한 구조이다.</li>\n<li>\n<p>Status line</p>\n<ul>\n<li>http viersion\nRequest와는 다르게 앞에 온다.</li>\n<li>Status code\n응답상태 나타내는 숫자코드  ex) 200</li>\n<li>\n<p>Status text\n응답 상태 간략히 설정 ex)Not Found</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token response-status\">HTTP/1.1 <span class=\"token property\">404 Not Found</span></span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Heder</p>\n<ul>\n<li>Response의 headers와 동일하다.\n-다만 response에서만 사용되는 header 값들이 있다\n예로는 <code class=\"language-text\">User-Agent</code> 대신 Server 헤더가 사용된다.</li>\n</ul>\n</li>\n<li>\n<p>Body</p>\n<ul>\n<li>Response의 body와 일반적으로 동일하다. 요청에대한 값은 보냄</li>\n<li>\n<p>Request와 마찬가지로 모든 body가 있지않고 데이터 전송 할 필요 없다면 비어있게된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token response-status\">HTTP/1.1 <span class=\"token property\">404 Not Found</span></span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<p>Connection: close\nContent-Length: 1573\nContent-Type: text/html; charset=UTF-8\nDate: Mon, 20 Aug 2018 07:59:05 GMT</p>\n<!DOCTYPE html>\n<html lang=en>\n  <meta charset=utf-8>\n  <meta name=viewport content=\"initial-scale=1, minimum-scale=1, width=device-width\">\n  <title>Error 404 (Not Found)!!1</title>\n  <style>\n    *{margin:0;padding:0}html,code{font:15px/\n    .....\n  <p>The requested URL <code>/payment-sync</code>\n```\n## 자주 쓰이는 HTTP Methods\n<ul>\n<li>get(정보 가져올때)</li>\n<li>post(데이터의 변화가 필요할때 /생성/수정/삭제 등)</li>\n<li>PUT(post와 비슷함, 잘사용안하지만 굳이 나누면 post만들 때 PUT 수정할때)</li>\n<li>DELETE(내용을 삭제할 때)</li>\n</ul>\n<p>status code 개발자가 결정하는 것으로 잘 알아두어야함</p>\n<h2 id=\"자주-쓰이는-http-status-code\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-http-status-code\" aria-label=\"자주 쓰이는 http status code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자주 쓰이는 HTTP Status Code</h2>\n<p>200 ok</p>\n<ul>\n<li>문제없이 실행됬을 때 보여짐</li>\n</ul>\n<p>301 Moved Permanently</p>\n<ul>\n<li>해당 URL이 다른 주소로 바뀌었을 때</li>\n</ul>\n<p>400 Bad Request</p>\n<ul>\n<li>잘못된 요청 받았을때\nex) 숫자만 받아야하는데 text가 올때</li>\n</ul>\n<p>401 Unauthorized</p>\n<ul>\n<li>유저가 요청 진행하려면 로그인, 회원가입 해야하는 것을 나타낼때 쓰는 코드</li>\n</ul>\n<p>404 찾을 수 있는 이유 host가 있어서 host에서 알려줌, 그러나 host주소도 잘못 쓰면 응답이 되지 않는다.</p>","fields":{"slug":"/posts/TIL-HTTP","tagSlugs":["/tag/http/","/tag/til/"]},"frontmatter":{"date":"2020-04-09T23:00:00","description":"HTTP TIL 배운거 정리","tags":["HTTP","TIL"],"title":"HTTP TIL","socialImage":""}}},"pageContext":{"slug":"/posts/TIL-HTTP"}}}