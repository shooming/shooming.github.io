{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-Git","result":{"data":{"markdownRemark":{"id":"d0c3dab7-58c3-5cda-84ce-3abf0a9f1201","html":"<h1 id=\"git\" style=\"position:relative;\"><a href=\"#git\" aria-label=\"git permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GIT</h1>\n<h2 id=\"git의-간단한-개요\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EA%B0%84%EB%8B%A8%ED%95%9C-%EA%B0%9C%EC%9A%94\" aria-label=\"git의 간단한 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GIT의 간단한 개요</h2>\n<p>git은 VCS(version contorl System)로서 소스코드의 버전관리하는 시스템이다.</p>\n<p>보통 협업툴로서 많이 사용한다.</p>\n<p>github은 git으로 Local 저장소에서 파일을 관리를 하게 해주던걸 인터넷에서 여러명이 원격저장소로 관리할 수 있게 해준다.</p>\n<p>기준이 되는 저장소 필요한데 레포지토리라고함.</p>\n<p>만약 github없다면 서버올려서 코드공유해야하고 불편하고 비용도 많이 들었을것이다.</p>\n<p>중앙서버(github)와 local(git)로 구분된다.</p>\n<hr>\n<h2 id=\"git-hub의-사용법\" style=\"position:relative;\"><a href=\"#git-hub%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"git hub의 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git Hub의 사용법</h2>\n<p>일단 git을 사용하기위해서는 git을 사용할 수 있도록 폴더에 설정을 해줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init</code></pre></div>\n<p>그 명령어는 <code class=\"language-text\">git init</code>이다 이 명령어를 사용하면 프로젝트를 git repository로 만들기위해 사용 .git폴더가 생성됨  </p>\n<p>GitHub에 있는 자료를 내 로컬 저장소로 복제하려면 clone 해야한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token operator\">&lt;</span>원격저장소 위치<span class=\"token operator\">></span></code></pre></div>\n<p>참고로 <code class=\"language-text\">git clone</code>을 하면 자동으로 해당 저장소가 폴더채로 다운받아지며 폴더안은 이미 <code class=\"language-text\">init</code>이 된상태이다.</p>\n<p>git에서 수정된 파일이나 폴더들에는 3가지 상태가 존재한다.</p>\n<ul>\n<li>modified - 수정일어나서 변화 감지</li>\n<li>staged - 중간세이브 commit 되기전에 중간상태 저장하고 문제가 생기면 되돌리기 위해서존재한다. staged상태라면 commit이 가능하다</li>\n<li>committed - commit이 된상태로 push가 가능한 상태가 된다.</li>\n</ul>\n<p>이렇게 3가지 순서가있는데 일단 파일을 수정한다.</p>\n<p>그리고 지금 수정을 다 마치고 현재 상태를 확인해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status</code></pre></div>\n<p>그때 사용하는 명령어가 <code class=\"language-text\">git status</code>이다. 해당 명령어를 사용하면 현재 modified상태인지 staged상태인지 알려준다.</p>\n<p>modified 상태라면 staged상태로 만들어야할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>파일 / 폴더명<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> * <span class=\"token comment\"># 모든 파일, 폴더 선택</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 현재폴더 아래 있는 모든 파일 선택</span></code></pre></div>\n<p>그때는 <code class=\"language-text\">git add</code>를 사용하면된다.</p>\n<p>이때 원하지 않은데 add하여 staged된 파일은 <code class=\"language-text\">git checkout -- &quot;파일 / 폴더명&quot;</code>을 쓰면 modified상태가 된다.</p>\n<p>그다음 staged되었으니 commit을 해야할것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"메세지 입력\"</span></code></pre></div>\n<p><code class=\"language-text\">git commit</code>을 사용하면되고 <code class=\"language-text\">-m</code> 옵션을 사용하여 바로 뒤에 메세지를 입력한다. 만약 <code class=\"language-text\">git commit</code>만 사용하게되면 해당 터미널에서 사용하는 기본 편집기가 실행된다.</p>\n<p>이제 committed된 파일 / 폴더를 원격저장소로 보낼것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin <span class=\"token operator\">&lt;</span>branch명<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">git push</code>명령어를 사용하면 원격저장소로 파일을 보내줄 수 있다.</p>\n<p>만약 원격저장소에서 최신상태의 버전을 받고싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull</code></pre></div>\n<p><code class=\"language-text\">git pull</code>명령어를 사용하면된다.</p>\n<p>아래는 간단한 git 명령어 모음이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init\n프로젝트를 <span class=\"token function\">git</span> repository로 만들기위해 사용 .git폴더가 생성됨 \n\n<span class=\"token function\">git</span> <span class=\"token function\">add</span>\n옵션 -a 모든파일 선택\n옵션 <span class=\"token builtin class-name\">.</span> 현재폴더 아래 있는 모든 파일 선택\nmodified 파일을 staged 상태로 옮기고자 할 때 사용함.\n\n<span class=\"token function\">git</span> commit\n<span class=\"token function\">add</span> 된 파일들을 메시지 작성하여 커밋함\n\n<span class=\"token function\">git</span> <span class=\"token function\">diff</span>\nmodified 상태에서만 나옴 수정사항 보여줌\n\n<span class=\"token function\">git</span> status\n<span class=\"token function\">git</span> repository의 상태를 보여줌\n\n<span class=\"token function\">git</span> log\ncommit 내역 보여줌 commit history라고도 함\n\n<span class=\"token function\">git</span> <span class=\"token function\">rm</span>\ngit에 등록된 파일 삭제할때 사용\n\n<span class=\"token function\">git</span> <span class=\"token function\">mv</span>\n파일 위치 옮기거나 이름 바꿀때 사용\n\n<span class=\"token function\">git</span> branch\nbranch 생성, 삭제, 관리하는 명령어\n\n<span class=\"token function\">git</span> checkout\nbranch 이동할때 사용하는 명령어\n\n<span class=\"token function\">git</span> checkout -- <span class=\"token operator\">&lt;</span>modified파일이름<span class=\"token operator\">></span>\n잘못된 <span class=\"token function\">add</span> 파일 풀때 -- 다음은 띄어야한다.\n\n<span class=\"token function\">git</span> clone\n남의 저장서 퍼올때 사용하고 fork라고도 함</code></pre></div>\n<hr>\n<h2 id=\"branch--merging\" style=\"position:relative;\"><a href=\"#branch--merging\" aria-label=\"branch  merging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>branch &#x26; merging</h2>\n<p>소스의 가지라고 한다 새로운 작업할때 branch 만들게 되며,\n기존 소스 영향 안받게하고 안전하게 버전을 관리하게 하기위해 꼭 필요하다. 여러사람이 만들면 언제 바뀔지 알수없지 때문이기 때문이다.\n협업에서 branch명은 <code class=\"language-text\">feature(원하는 이름)</code>을 보통 사용한다.</p>\n<p>branch에서 작업을 하고 마친다음 pull request(pr)를 하여 master branch에 merge시키는 형태가 된다.</p>\n<p>merge는 branch를 합치는 것을 말하는데 내 master 버전이 update 하려는 저장소의 master버전보다 낮고 수정하려는 부분이 같은 상태라면 conflict된다.</p>\n<p>pull request(pr)을 하게되면 충돌일어 github에서 그 사실을 알려준다. 그럴경우 <code class=\"language-text\">git pull</code>을 하여 수정이 필요하다고 표시된 부분을 수정하여 다시 <code class=\"language-text\">git push</code>하면 pull request에 자동적으로 다시 반영한다.</p>\n<p>pull request되면 원격저장소에 branch는 자동적으로 사라지게 되고 local에는 남아있는데 branch의 재사용은 권장되지 않으므로 삭제하고 다시 만드는 것이 좋다.</p>\n<p>git은 local에서 협업은 github에서 한다.</p>\n<h2 id=\"gitignore-file\" style=\"position:relative;\"><a href=\"#gitignore-file\" aria-label=\"gitignore file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.gitignore file</h2>\n<p>git repo의 파일 중 원하지 않는 포함되는 거 막기위해 .gitgnore file 생성해서 그안에 들어가지 않았으면 하는 내용 적음</p>\n<hr>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC..</h2>\n<p>git mremote add origin 원격저장소 주소\norigin이 기본이고 다르게 작성해도 됨 원격저장소의 별명임(origin)</p>\n<p>touch (파일명).txt\ntouch 파일 생성 명령어</p>\n<p><code class=\"language-text\">git push origin(리모트 별명) (푸쉬할 브랜치명)</code>\n브랜치상태로 push 가능~</p>\n<p>pull request는 원격저장소에서함 그이유는 conflict 때문임</p>\n<p>브랜치는 사용하고 다시 사용하지 않음 브랜치는 사용 후 버릴것 항상 새로 생성할것</p>\n<p>git pull써서 다른사람 작업한 최신상태 땡겨 온다. <code class=\"language-text\">git pull origin(원격저장소 별명) master(로컬 브랜치)</code> 라고 치면됨</p>\n<p>tig 치면 바로 브랜치 상태 볼수있음</p>\n<p><code class=\"language-text\">git branch -d (삭제시킬 브랜치이름)</code></p>","fields":{"slug":"/posts/TIL-Git","tagSlugs":["/tag/git/","/tag/til/"]},"frontmatter":{"date":"2020-04-02T22:40:32.169Z","description":"Git TIL 배운거 정리","tags":["Git","TIL"],"title":"Git TIL","socialImage":""}}},"pageContext":{"slug":"/posts/TIL-Git"}}}