{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-Docker","result":{"data":{"markdownRemark":{"id":"0f47a19d-5d84-5e70-93e5-4bddfa5f45e2","html":"<h1 id=\"docker\" style=\"position:relative;\"><a href=\"#docker\" aria-label=\"docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker</h1>\n<h2 id=\"docker란\" style=\"position:relative;\"><a href=\"#docker%EB%9E%80\" aria-label=\"docker란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker란?</h2>\n<p>도커는 서비스를 배포하기위해서 어떤 환경에서도 같은 동작을 할 수 있도록 컨테이너를 사용한 가상화 방식을 이용해서 서비스를 하는 것이다.</p>\n<h2 id=\"doker-설치하기\" style=\"position:relative;\"><a href=\"#doker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"doker 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Doker 설치하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> apt-transport-https ca-certificates <span class=\"token function\">curl</span> software-properties-common\n<span class=\"token function\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n<span class=\"token function\">sudo</span> add-apt-repository <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\"</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">apt-cache</span> policy docker-ce\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce</code></pre></div>\n<h2 id=\"docker-명령어\" style=\"position:relative;\"><a href=\"#docker-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"docker 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker 명령어</h2>\n<p>우분투는 Docker 사용시 sudo를 붙여주어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 실행중인 컨테이너 보여주는 커맨드</span>\ndocker <span class=\"token function\">ps</span>\n\n<span class=\"token comment\"># 실행이 종료된 것을 포함해서 모든 컨테이너 보는 컨맨드 및 옵션</span>\ndocker <span class=\"token function\">ps</span> -a\n\n<span class=\"token comment\"># 생성된 혹은 다운로드 된 이미지를 보여주는 커맨드</span>\ndocker images\n\n<span class=\"token comment\"># 모든 이미지를 보여주는 커맨드 및 옵션</span>\ndocker images -a\n\n<span class=\"token comment\"># 실행중인 컨테이너 중지시키는 커맨드</span>\ndocker <span class=\"token function\">kill</span> <span class=\"token punctuation\">(</span>컨테이너 이름 or 번호<span class=\"token punctuation\">)</span>\ndocker stop <span class=\"token punctuation\">(</span>컨테이너 이름 or 번호<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 도커 로그인</span>\ndocker login\n\n<span class=\"token comment\"># 도커 이미지 push</span>\ndocker push <span class=\"token punctuation\">(</span>사용자아이디<span class=\"token punctuation\">)</span>/<span class=\"token punctuation\">(</span>이미지이름<span class=\"token punctuation\">)</span>:0.1.0<span class=\"token punctuation\">(</span>버전<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 도커 이미지 pull</span>\ndocker pull <span class=\"token punctuation\">(</span>사용자아이디<span class=\"token punctuation\">)</span>/<span class=\"token punctuation\">(</span>이미지이름<span class=\"token punctuation\">)</span>:0.1.0<span class=\"token punctuation\">(</span>버전<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"docker-이미지-만들기\" style=\"position:relative;\"><a href=\"#docker-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"docker 이미지 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker 이미지 만들기</h2>\n<ol>\n<li>Dockerfile 작성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> Dockerfile</code></pre></div>\n<p>vi를 통해 파일을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#./Dockerfile</span>\nFROM python:3 <span class=\"token comment\">#기반이 될 이미지</span>\n\n<span class=\"token comment\"># 작업디렉토리(default)설정</span>\nWORKDIR /usr/src/app \n\n<span class=\"token comment\">## Install packages</span>\n<span class=\"token comment\">#현재 패키지 설치 정보를 도커 이미지에 복사</span>\nCOPY requirements.txt ./ \n<span class=\"token comment\">#설치정보를 읽어 들여서 패키지를 설치</span>\nRUN pip <span class=\"token function\">install</span> -r requirements.txt\n\n<span class=\"token comment\">## Copy all src files</span>\n<span class=\"token comment\">#현재경로에 존재하는 모든 소스파일을 이미지에 복사</span>\nCOPY <span class=\"token builtin class-name\">.</span> <span class=\"token builtin class-name\">.</span> \n\n<span class=\"token comment\">## Run the application on the port 8080</span>\n<span class=\"token comment\">#8000번 포트를 외부에 개방하도록 설정</span>\nEXPOSE <span class=\"token number\">8000</span>   \n\n<span class=\"token comment\">#CMD [\"python\", \"./setup.py\", \"runserver\", \"--host=0.0.0.0\", \"-p 8080\"]</span>\n<span class=\"token comment\">#gunicorn을 사용해서 서버를 실행 example 프로젝트명으로 바꿀것</span>\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"gunicorn\"</span>, <span class=\"token string\">\"--bind\"</span>, <span class=\"token string\">\"0.0.0.0:8000\"</span>, <span class=\"token string\">\"example.wsgi:application\"</span><span class=\"token punctuation\">]</span>  </code></pre></div>\n<p>도커파일을 이용해 이미지를 빌드한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t <span class=\"token string\">'도커허브에 가입한 계정명'</span>/<span class=\"token string\">'이미지명(프로젝트명 권장)'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'버전'</span> <span class=\"token builtin class-name\">.</span>\nex<span class=\"token punctuation\">)</span> docker build -t wecode/wecodeproject:0.1.0 <span class=\"token builtin class-name\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run --name <span class=\"token string\">'컨테이너 명'</span> -d<span class=\"token string\">'데몬으로 실행하기 위한 옵션'</span> -p <span class=\"token string\">'호스트 포트'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'컨테이너 포트'</span> <span class=\"token string\">'이미지명'</span>\nex<span class=\"token punctuation\">)</span> docker run --name wecode01 -d -p <span class=\"token number\">8000</span>:8000 wecode/wecodeproject:0.1.0</code></pre></div>\n<p>빌드된 이미지에 이상이 있을 경우, docker ps -a 명령어로 살펴봤을떄, status가 exited 됐을것이다.\n이는 서버가 실행되다 오류가 발생홰서 문제가 되는 경우가 많다. 그렇다면 다음과 같이 실행해서 문제를 확인해 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```bash\ndocker run -it wecode/wecodeproject:0.1.0 /bin/bash\n#위의 명령어를 실행하면 이미지를 기반으로 바로 컨테이너를 실행하면서 접속한다.\n#process 등 여러가지를 살펴보면서 현재 서버에 어떤 문제가 있는지 알 수 있다. 하지만 수정은 컨테이너에서 하는게 아닌 이미지를 다시 빌드 해야한다.</code></pre></div>\n<p>이미지 전부 삭제하는 명령어</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker rmi <span class=\"token variable\"><span class=\"token variable\">$(</span>docker images -q<span class=\"token variable\">)</span></span>\n<span class=\"token comment\">#ubuntu</span>\n<span class=\"token function\">sudo</span> docker rmi <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">sudo</span> docker images -q<span class=\"token variable\">)</span></span></code></pre></div>\n<p>컨테이너 전부 삭제하는 명령어</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -a -q<span class=\"token variable\">)</span></span></code></pre></div>","fields":{"slug":"/posts/TIL-Docker","tagSlugs":["/tag/docker/","/tag/til/"]},"frontmatter":{"date":"2020-05-22T23:00:00","description":"Docker TIL 배운거 정리","tags":["Docker","TIL"],"title":"Docker TIL","socialImage":""}}},"pageContext":{"slug":"/posts/TIL-Docker"}}}