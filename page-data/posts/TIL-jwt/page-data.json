{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-jwt","result":{"data":{"markdownRemark":{"id":"8e45854e-0d7c-56f4-adc2-23ace16fd086","html":"<h1 id=\"jwt\" style=\"position:relative;\"><a href=\"#jwt\" aria-label=\"jwt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT</h1>\n<p>JWT는 JSON Web Token의 약자로 JSON을 이용해 발행된 웹 토큰을 말한다.</p>\n<p>JWT를 사용하는 이유는 서버가 Statelsess이기 때문이기 때문이다. http는 통신을 하고 나면 기존의 통신을 기억하지 않는다. 그렇기 때문에 인증이 필요한 서비스의 경우 지속적으로 본인이 누구인지 필요한 정보를 제출해야한다. 하지만 웹토큰을 발행받고 웹토큰으로 본인임을 인증해주면 계속해서 인증할 필요없이 웹토큰이 그 역활을 수행해 준다.</p>\n<h2 id=\"jwt의-형태\" style=\"position:relative;\"><a href=\"#jwt%EC%9D%98-%ED%98%95%ED%83%9C\" aria-label=\"jwt의 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT의 형태</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">aaa<span class=\"token punctuation\">.</span>bbb<span class=\"token punctuation\">.</span>ccc</code></pre></div>\n<p>a = header\n토큰의 타입과 해싱 알고리즘으로 구성된다.</p>\n<p>b = payload\n토큰에 담을 내용</p>\n<p>c = sgniture\n헤더의 인코딩 값과 정보의 인코딩값 합쳐서 비밀키로 해시하여 생성한다.</p>\n<h2 id=\"jwt-사용하기\" style=\"position:relative;\"><a href=\"#jwt-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"jwt 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 사용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> jwt \n\nSECRET <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span> <span class=\"token comment\">#'랜덤한 조합의 키' 예제이므로 단순하게 'secret'이라고 하겠습니다.</span>\n\naccess_token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> SECRET<span class=\"token punctuation\">,</span> algorithm <span class=\"token operator\">=</span> <span class=\"token string\">'HS256'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>access_token<span class=\"token punctuation\">)</span>\n<span class=\"token string\">b'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MX0.-xXA0iKB4mVNvWLYFtt2xNiYkFpObF54J9lj2RwduAI'</span>\naccess_token <span class=\"token operator\">=</span> access_token<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> jsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span> access_token<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">jwt</code>를 import해 줍니다.</li>\n<li><code class=\"language-text\">jwt.encode</code>를 사용해서 <code class=\"language-text\">access_token</code>을 발행해 줄 수 있다.\n<code class=\"language-text\">jwt.encode=({json형태 : payload}, SECRET키, algorithm = &#39;HS256&#39;)</code>\njwt는 이러한 양식으로 만들 수 있다. 이때 jwt는 bytes형태로 만들어지기 때문에 front에 전달할때는 decode해서 보내주어얀다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">header <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>access_token<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SECRET<span class=\"token punctuation\">,</span> algorithm <span class=\"token operator\">=</span> <span class=\"token string\">'HS256'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>넘겨받은 <code class=\"language-text\">access_token</code>을 decode를 해주어야지 payload의 값을 알 수가 있다.</li>\n<li><code class=\"language-text\">jwt.decode(front에서 받은 토큰.decode(&#39;utf-8&#39;),SECRET키, algorithm = &#39;HS256&#39;)</code>jwt.decode를 활용하여 이런 형식에 맞추어서 작성하면 원래 json형태의 값을 얻을 수 있다.</li>\n</ol>","fields":{"slug":"/posts/TIL-jwt","tagSlugs":["/tag/jwt/","/tag/인증-인가/","/tag/til/"]},"frontmatter":{"date":"2020-04-15T23:10:00","description":"인증/인가 TIL 배운거 정리","tags":["jwt","인증*인가","TIL"],"title":"JWT TIL","socialImage":""}}},"pageContext":{"slug":"/posts/TIL-jwt"}}}