{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Django-ORM-CRUD","result":{"data":{"markdownRemark":{"id":"ebb0462c-1232-51ff-b14d-f70f8dfff8e6","html":"<h1 id=\"django-orm-crud\" style=\"position:relative;\"><a href=\"#django-orm-crud\" aria-label=\"django orm crud permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django ORM CRUD</h1>\n<h2 id=\"db-조회\" style=\"position:relative;\"><a href=\"#db-%EC%A1%B0%ED%9A%8C\" aria-label=\"db 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 조회</h2>\n<p>Django ORM은 <code class=\"language-text\">모델클래스.objects</code> 이라는 Manager가 제공됨</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">AAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># AAA테이블의 모든 데이터 객체상태로 가져옴</span>\nAAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># AAA테이블의 get 조건에 부합하는 row하나 가져옴</span>\nAAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># AAA테이블의 filter 조건에 해당하는 row 다 가져옴</span>\nAAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># AAA테이블의 모든 데이터 가져오지만 객체상태 아님</span></code></pre></div>\n<h3 id=\"filter의-and조건\" style=\"position:relative;\"><a href=\"#filter%EC%9D%98-and%EC%A1%B0%EA%B1%B4\" aria-label=\"filter의 and조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>filter의 AND조건</h3>\n<p>Django ORM은 filter를 통해서 원하는 정보들만 가져올 수 있는데 AND나 OR조 건을 이용해 내가원하는 조건들의 범위를 좁힐 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">AAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>colum <span class=\"token operator\">=</span> 원하는값<span class=\"token punctuation\">,</span> colum <span class=\"token number\">2</span> <span class=\"token operator\">=</span> 원하는값<span class=\"token punctuation\">)</span></code></pre></div>\n<p>AND 조건은 별다른 방법없이 <code class=\"language-text\">,</code>(콤마)를 사용해서 계족 추가해주면된다.</p>\n<h3 id=\"filter의-or조건\" style=\"position:relative;\"><a href=\"#filter%EC%9D%98-or%EC%A1%B0%EA%B1%B4\" aria-label=\"filter의 or조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>filter의 OR조건</h3>\n<p>OR은 AND와는 다르게 Q객체를 import 해주어야한다. 물론 Q객체를 활용한 AND조건도 사용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">AAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>filer<span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span>colum <span class=\"token operator\">=</span> 조건<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> Q<span class=\"token punctuation\">(</span>colum2 <span class=\"token operator\">=</span> 조건<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nAAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span>colum <span class=\"token operator\">=</span> 조건<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">(</span>colum2 <span class=\"token operator\">=</span> 조건<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"creat\" style=\"position:relative;\"><a href=\"#creat\" aria-label=\"creat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CREAT</h2>\n<p>DB에 새로운 데이터를 만드는 방법은 2가지가 있다.\nviews.py에서 사용하기위해서는 models.py에 모델이 만들어져 있어야하며 해당 파일이 views.py에 import되어 있어야한다.</p>\n<ol>\n<li>장고 ORM을 활용하여 CREAT 하는 방법</li>\n<li>\n<p>변수에 담고 save함수를 사용하는 법</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 1</span>\nAAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>컬럼명<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 값<span class=\"token punctuation\">,</span> 컬럼명<span class=\"token number\">2</span> <span class=\"token operator\">=</span> 값<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#2</span>\nOH <span class=\"token operator\">=</span> AAA<span class=\"token punctuation\">(</span>컬럼명<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 값<span class=\"token punctuation\">,</span> 컬럼명<span class=\"token number\">2</span> <span class=\"token operator\">=</span> 값<span class=\"token punctuation\">)</span>\nOH<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"update\" style=\"position:relative;\"><a href=\"#update\" aria-label=\"update permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UPDATE</h2>\n<p>UPDATE 또한 2가지 방법을 이용한다.\n조건은 상기 조건과 동일하다.</p>\n</li>\n<li>각 model의 row속성 변경하고 save 함수로 저장 - 각 model row별로 SQL수행 - 다수 Row 작업 시 성능저하</li>\n<li>\n<p>QuerySet의 update 함수에 업데이트할 속성값을 지정하여 일괄 수정 - 하나의 SQL로서 동작, 동작빠름</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#1</span>\nABC <span class=\"token operator\">=</span> AAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># id가 12인 row 객체상태로 가져옴</span>\nABC<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> ‘빛이 당신을 태울 것 입니다<span class=\"token punctuation\">.</span>’ <span class=\"token comment\"># id가 12인 row의 title을 변경함</span>\nABC<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nqueryset <span class=\"token operator\">=</span> AAA<span class=\"token punctuation\">.</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> queryset<span class=\"token punctuation\">:</span>\npost<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">=</span> ‘붓싼’\npost<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 데이터 업데이트 할 때마다 쿼리요청으로 성능저하</span>\n—————\n<span class=\"token comment\">#2</span>\nqueryset <span class=\"token operator\">=</span> AAA<span class=\"token punctuation\">.</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nqueryset<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>destination <span class=\"token operator\">=</span> ‘발할라’<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 일괄 update 요청</span></code></pre></div>\n<h2 id=\"delete\" style=\"position:relative;\"><a href=\"#delete\" aria-label=\"delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delete</h2>\n<p>Delete도 update와 유사하다. 명령어만 바뀐 느낌이다.\n조건, 방법도 동일하므로 장점과 단점도 일치한다.</p>\n</li>\n<li>각 model의 row속성 삭제하고 save 함수로 저장 - 각 model row별로 SQL수행 - 다수 Row 작업 시 성능저하</li>\n<li>\n<p>QuerySet의 delete 함수에 업데이트할 속성값을 지정하여 일괄 수정 - 하나의 SQL로서 동작, 동작빠름</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#1</span>\nABC <span class=\"token operator\">=</span> AAA<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># id가 12인 row 객체상태로 가져옴</span>\nABC<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># id가 12인 row 지움</span>\nqueryset <span class=\"token operator\">=</span> AAA<span class=\"token punctuation\">.</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> queryset<span class=\"token punctuation\">:</span>\npost<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 데이터 삭제 할 때마다 쿼리요청으로 성능저하</span>\n—————\n<span class=\"token comment\">#2</span>\nqueryset <span class=\"token operator\">=</span> AAA<span class=\"token punctuation\">.</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nqueryset<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 일과 delete 요청</span></code></pre></div>\n</li>\n</ol>","fields":{"slug":"/posts/Django-ORM-CRUD","tagSlugs":["/tag/django/","/tag/til/"]},"frontmatter":{"date":"2020-05-11T23:00:00","description":"Django 공부 후 정리","tags":["Django","TIL"],"title":"Django ORM CRUD","socialImage":""}}},"pageContext":{"slug":"/posts/Django-ORM-CRUD"}}}