{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-setting-Django","result":{"data":{"markdownRemark":{"id":"db17cb4a-bbb3-5078-ad60-0087e00cd566","html":"<h1 id=\"초기세팅\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%EC%84%B8%ED%8C%85\" aria-label=\"초기세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기세팅</h1>\n<h2 id=\"서버-처음-사용시-기본적인-세팅부분\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%B2%98%EC%9D%8C-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%84%B8%ED%8C%85%EB%B6%80%EB%B6%84\" aria-label=\"서버 처음 사용시 기본적인 세팅부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 처음 사용시 기본적인 세팅부분</h2>\n<ol>\n<li>.gitignore</li>\n</ol>\n<p>git을 이용한 협업을 주로하기 때문에 git에 올리기 싫은 내용이거나 보안에 문제가되는 요소들은 사전에 필터링하여 git에 업로드 되지 않게 하기 위해 <code class=\"language-text\">.gitignore</code>이라는 파일을 작성하여 사용한다.</p>\n<p><code class=\"language-text\">.gitignore</code>는 <a href=\"https://www.gitignore.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.gitignore.io/</a> 과 같이 자신이 사용하는 환경(linx, django, visualstudio code 등)을 적으면 자동으로 만들어 주는 사이트가 있다. 여기서 자신의 환경 적고 나온 내용을 복사해서 manage.py가 있는 폴더에 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#.gitignor</span>\n\n<span class=\"token comment\">### Django ###</span>\n*.log\n*.pot\n*.pyc\n__pycache__/\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\nmedia\nmy_settings.py  <span class=\"token comment\">#&lt;-- 이 부분 추가</span></code></pre></div>\n<p>위와 같이 기본적인 예외처리를 해주고 나서 마지막부분처럼 <code class=\"language-text\">.gitignore</code>의 django부분에 <code class=\"language-text\">my_settings.py</code>를 추가 시켜주어야한다. 왜냐하면 보안과 관련된 내용을 <code class=\"language-text\">my_settings.py</code>에 작성할 것이기 때문에 git에 올리지 안되기 때문이다.</p>\n<h2 id=\"사용하지-않는-setting-주석\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-setting-%EC%A3%BC%EC%84%9D\" aria-label=\"사용하지 않는 setting 주석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용하지 않는 setting 주석</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># settings.py</span>\n\nINSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token comment\">#    'django.contrib.admin',</span>\n<span class=\"token comment\">#    'django.contrib.auth',</span>\n    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'corsheaders'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nMIDDLEWARE <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.middleware.security.SecurityMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.middleware.common.CommonMiddleware'</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">#    'django.middleware.csrf.CsrfViewMiddleware',</span>\n<span class=\"token comment\">#    'django.contrib.auth.middleware.AuthenticationMiddleware',</span>\n    <span class=\"token string\">'django.contrib.messages.middleware.MessageMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'corsheaders.middleware.CorsMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">INSTALLED_APPS</code>와 <code class=\"language-text\">MIDDLEWARE</code>에서 <code class=\"language-text\">auth</code>, <code class=\"language-text\">admin</code> 기능은 사용하지 않을 예정이므로 주석처리 하여 작동하지 않게 해둔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#메인 앱의 urls.py</span>\n\n<span class=\"token comment\"># from django.contrib import admin</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token comment\">#    path('admin/', admin.site.urls),</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>기본적으로 admin기능을 django에서 제공하므로 <code class=\"language-text\">django-admin startproject (앱이름)</code> 할때 만들어진 폴더에 urls.py에 작성된 admin기능을 주석처리한다.</p>\n<h2 id=\"corsheaders\" style=\"position:relative;\"><a href=\"#corsheaders\" aria-label=\"corsheaders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>corsheaders</h2>\n<p>과거에는 django에서 페이지를 제공했었는데 그 당시 서버는 사용자의 웹브라우저를 신용하는 상태였다. 그러다 보니 공격자들이 게시물들을 활용하여 이미지와 같이 <code class=\"language-text\">scr=&#39;나쁜주소&#39;</code> 웹서버가 주소를 참고 할 수 밖에 없게 하므로서 대상 게시물을 열어본 사용자를 통해 원치 않은 공격을 시작한다.</p>\n<p>그걸 방지 위한 django의 장치가 csrf였던 것이었던 것이다. 그러나 시간이 흐르면서 동일 출처 정책 등 자바스크립트의 발전으로 필요가 없게 되었다. 그러다 보니 자신의 도메인이 아니면 다른 사이트의 정보를 받아오기 어려워져 이것을 해결하기위해 cors를 사용하게 된것이다. cors를 사용하여 허가된 출저 집단을 저장해서 http의 헤더에 담아서 사용한다. cross-domain과 같은 일들에 능동적으로 대응할 수 있게된다.</p>\n<h3 id=\"cors-설치\" style=\"position:relative;\"><a href=\"#cors-%EC%84%A4%EC%B9%98\" aria-label=\"cors 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cors 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">pip install django<span class=\"token operator\">-</span>cors<span class=\"token operator\">-</span>headers</code></pre></div>\n<p>pip를 이용해 conda 가상환경에 cors를 설치해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># settings.py</span>\n\nINSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'corsheaders'</span>\n<span class=\"token punctuation\">]</span>\n\nMIDDLEWARE <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">'corsheaders.middleware.CorsMiddleware'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>cors를 설치했으니 django에게 이 앱이 설치됬음을 이해 시켜주어야합니다.\nINSTALLED_APPS에 등록하고 미들웨어가 입,출력제어를 해줄 수 있게 하기위해서\nMIDDLWARE에 등록해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">##CORS</span>\nCORS_ORIGIN_ALLOW_ALL<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>\nCORS_ALLOW_CREDENTIALS <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\nCORS_ALLOW_METHODS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'PATCH'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\nCORS_ALLOW_HEADERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'accept'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'accept-encoding'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'authorization'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'content-type'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'dnt'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'origin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'user-agent'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'x-csrftoken'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'x-requested-with'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token comment\">#만약 허용해야할 추가적인 헤더키가 있다면?(사용자정의 키) 여기에 추가하면 됩니다.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 setting 마지막에는 cors의 옵션들을 작성해주면 된다.</p>\n<h2 id=\"개발환경-공유\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EA%B3%B5%EC%9C%A0\" aria-label=\"개발환경 공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발환경 공유</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip freeze <span class=\"token operator\">></span> requirements.txt</code></pre></div>\n<p>해당 명령어를 사용하면 가상환경에 설치된 패키지들의 정보를 빼내어 txt파일로 저장할 수 있다.\n따로 저장하는 이유는 동일한 환경에서 서비스를 돌리기 위함이다. 만약 개발자가 의도한 환경에 맞추어진 서비스가 다른 패키지에 의해 정상적인 작동이 안될 수도있다 그런 상황을 방지하기 위함이기도하고, 작동함에 필요한 패키지를 인지시키기 위해서 이기도하다.</p>\n<h2 id=\"보안\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88\" aria-label=\"보안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안?</h2>\n<p>맨 위에서 <code class=\"language-text\">.gitignore</code>에 <code class=\"language-text\">my_settings.py</code>를 작성해야한다는 것을 이야기했다.\n그럼 어떻게 작성하는 것일까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'DATABASE 명'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'DB접속 계정명'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'DB접속용 비밀번호'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'실제 DB 주소'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'포트번호'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSECRET <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'secret'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'시크릿키'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">settings.py</code>에 작성되어있던 내용 중 databases와 secret이 있었다. 하지만 <code class=\"language-text\">setttings.py</code>는 git을 업로드가 되어야한다.\n그렇게 되면 두 내용에는 비밀번호와 암호화시 사용하는 키를 담고 있기때문에 보안에 취약해지게된다. 그러므로  <code class=\"language-text\">my_settings.py</code>에 해당 내용을 작성해야하는 것이다.</p>\n<p>그럼 <code class=\"language-text\">settings.py</code>에서 빠진 내용들은 어떻게 참조하게될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> my_settings\n\nDATABASE <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>DATABASES\n\nSECRET <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>SECRET<span class=\"token punctuation\">[</span><span class=\"token string\">'secret'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>위와 같이 import하여 사용하는 방식을 이용한다.</p>","fields":{"slug":"/posts/TIL-setting-Django","tagSlugs":["/tag/django/","/tag/til/"]},"frontmatter":{"date":"2020-04-17T23:10:00","description":"Django 초기세팅 배운거 정리","tags":["Django","TIL"],"title":"Django 초기세팅 TIL","socialImage":""}}},"pageContext":{"slug":"/posts/TIL-setting-Django"}}}