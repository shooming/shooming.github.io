{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/DRF","result":{"data":{"markdownRemark":{"id":"04a155a6-e681-5236-bbfa-72b12391e1be","html":"<h1 id=\"drf\" style=\"position:relative;\"><a href=\"#drf\" aria-label=\"drf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DRF?</h1>\n<p>DRF(Django Rest Framework)는 Django 안에서 RESTful API 서버를 쉽게 구축 할 수 있게 해주는 오픈소스 라이브러리이다.</p>\n<h2 id=\"restful\" style=\"position:relative;\"><a href=\"#restful\" aria-label=\"restful permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful?</h2>\n<p>그렇다면 RESTful은 무엇인가?\nRESTful은 Representational State Transfer의 줄입말로 URI로 자원을 표현하고 http의 Method(GET / POST / PUT / DELETE)를 활용하여 행위를 정의 하는 방식이다. 즉 REST를 적용한 API를 RESTful API라고 부르 는 것이다.</p>\n<h2 id=\"drf를-사용하는-이유\" style=\"position:relative;\"><a href=\"#drf%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"drf를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DRF를 사용하는 이유</h2>\n<ul>\n<li>웹 브라우저 API는 범용성이 크다. 개발을 쉽게 만들어준다.</li>\n<li>인증 정책에 OAuth1, OAuth2를 위한 추가적인 패키지가 추가되어 있는 경우</li>\n<li>시리얼라이즈 기능을 제공 해준다.(DB data -> JSON)</li>\n<li>문서화 및 커뮤니티 지원이 잘 되어있다.</li>\n</ul>\n<h2 id=\"serializer\" style=\"position:relative;\"><a href=\"#serializer\" aria-label=\"serializer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serializer</h2>\n<p>Serializer는 직렬화하는 클래스로서, 사용자의 DB안의 사용자 프로필사진, 이메일, 이름, 성별이 있다는 가정하고 사용자 모델 인스턴스를 JSON형태 혹은 Dictionary 형태로 직렬화 할 수 있다.</p>\n<blockquote>\n<p>DJango에서 Client으로 복잡한 데이터(모델 인스턴스 등)를 보내려면 ‘string’으로 변환해야합니다. 이 변환을 serializer 라고 함.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span>email<span class=\"token operator\">=</span><span class=\"token string\">\"user@user.user\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> sex<span class=\"token operator\">=</span><span class=\"token string\">\"Female\"</span><span class=\"token punctuation\">,</span> profile_image<span class=\"token operator\">=</span><span class=\"token string\">\"user.png\"</span><span class=\"token punctuation\">)</span>\nUserSerializer<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"email\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"user@user.user\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"sex\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"female\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"profile_image\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"user.png\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 사용자가 있다면 DRF의 serializer를 통해 모델 인스턴스를 직렬화 할 수 있다.</p>\n<p>실 사용시에는 만약 사용자 정보를 열람하는 URL이 <code class=\"language-text\">/serializer/user/&lt;user_id&gt;/</code>가 있고 해당 View에서는 user_id의 해당하는 모델 인스턴스의 정보를 리턴한다고 가정하자.</p>\n<p>그렇게 되면 만약 우리가 <code class=\"language-text\">/serializer/user/1/</code> 이라는 URL로 요청을 했을시에 user_id가 1인 사용자의 정보를 JSON형태로 응답받을수 있을것이다.</p>\n<p>이는 사용자 프로필 페이지에 접근했을때 사용하는 View라고 하면 사용자 페이지의 들어갈때마다 해당하는 사용자의 user_id만 URL에 입력해주게되면 각 사용자의 정보를 JSON형태로 응답 받을 수 있을 것이다.</p>\n<p>위와 같은 기능을 하는 Serializer를 ModelSerializer라고 부른다.</p>","fields":{"slug":"/posts/DRF","tagSlugs":["/tag/django/","/tag/til/"]},"frontmatter":{"date":"2020-12-07T23:00:00","description":"DRF TIL 배운거 정리\"","tags":["Django","TIL"],"title":"DRF(Django Rest Framework)","socialImage":""}}},"pageContext":{"slug":"/posts/DRF"}}}