{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-Django2","result":{"data":{"markdownRemark":{"id":"4e20536f-cb5e-5291-ae41-69d0fd38b9a8","html":"<h1 id=\"django-2\" style=\"position:relative;\"><a href=\"#django-2\" aria-label=\"django 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 2</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python manage.py showmigrations</code></pre></div>\n<p>위 명령어를 통해 앞전에서 보았던 migration 했던것에 대한 상태를 확인 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">------------------ 아직 마이그레이션을 안했을 경우\ncontenttypes\n <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 0001_initial\n <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 0002_remove_content_type_name\nsessions\n <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 0001_initial\nuser\n <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 0001_initial\n------------------ 정상적으로 마이그레이션 됬을 경우\ncontenttypes\n <span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> 0001_initial\n <span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> 0002_remove_content_type_name\nsessions\n <span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> 0001_initial\nuser\n <span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> 0001_initial</code></pre></div>\n<p>위와 같이 migration여부가 X표시로 되어있어 어느 부분이 안됬는지 바로 확인이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sqlite3 db.sqlite3</code></pre></div>\n<p>sqlite3 데이터베이스 실행시키는 명령문으로 실행 후 .tables 명령어로 만들어진 데이터베이스들의 목록을 확인할 수 있다.\n<code class=\"language-text\">sqlite3</code>만 치고 들어와서 <code class=\"language-text\">.open db.sqlite3</code>를 쳐도 똑같이 활용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sqlite<span class=\"token operator\">></span> .tables\n\ndjango_content_type  django_session     \ndjango_migrations    <span class=\"token function\">users</span>  </code></pre></div>\n<p>.tables를 치면 생성된 데이터베이스들 나오는데 users를 제외한 3개는 원래 기본적으로 존재하는 것들이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python manage.py shell</code></pre></div>\n<p>해당 명령어를 사용하면 python shell을 사용할 수 있게된다. python shell임으로 from imort가 가능하고 명령어를 쳐서 미리 확인 해 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> user<span class=\"token punctuation\">.</span>model <span class=\"token keyword\">import</span> User\nUser<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'기차'</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">=</span><span class=\"token string\">'자동차@비행기.com'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'고구마'</span><span class=\"token punctuation\">,</span> email <span class=\"token operator\">=</span> <span class=\"token string\">'감자@양파.net'</span><span class=\"token punctuation\">,</span> password <span class=\"token operator\">=</span> <span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 명령어를 사용하면 User 객체를 만들어 데이터 베이스에 저장을 한다.\n다만 위와 아래의 명령어 사용법이 조금 다른데 명령어를 사용하는가? 아니면 class에 인자를 직접 전달하는가에 차이이다. 여기서 인자를 전달하되면 <code class=\"language-text\">.save()</code>를 해주어야한다. 그렇지 않으면 저장되지 않기 때문이다. <code class=\"language-text\">.save()</code>는 d 객체를 만들때 뒤에 붙여도 되는데 그렇게되면 save 되면서 d에는 아무값도 남지 않게 된다.</p>\n<p>아래는 DB에서 객체를 불러오는 명령어들이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">User.objects.all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 모든 object 형태로 들어옴</span>\nUser.objects.values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 딕셔너리의 형태로 들어옴</span>\nUser.objects.get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 무조건 인자 하나는 꼭 들어가야함, object형태로 들어옴</span>\nUser.objects.filter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 원하는 집합을 구할때 필요</span></code></pre></div>\n<p>위 명령어로 작성하다보면 <code class=\"language-text\">&lt;QuerySet[]&gt;</code>으로 나오는 내용들이 있는데 <code class=\"language-text\">&lt;QuerySet[]&gt;</code>있으면 뒤에 추가적인 작업 할 수 있라는 내용이 되며, Django ORM에서 지원하는 것이다. query를 리스트형태로 만드는 이유는 많이 데이터를 받기위해서이다. 그리고 마지막 데이터 상태가 아님을 의미하기도 한다. list()형변환하면 QuerySet이 아니게된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#  list형태로 담겨있음</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token comment\"># 객체하나하나가 list형태로 되어있으므로 원하는 객체하나 불러오고 .name으로 객체내의 내용을 불러오기함</span>\nb <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># list + dictionary 조합으로 되어있음</span>\nb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># list의 객체들이 dictionary 조합으로 되어있어서 key값으로 불러와야함</span>\nc <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 객체만 담겨있다.</span>\nc<span class=\"token punctuation\">.</span>name <span class=\"token comment\"># 객체만 담겨있으므로 담겨있는 내용 불러오기 위해 dot notation을 사용한다.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># user/view.py</span>\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models      <span class=\"token keyword\">import</span> User\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> HttpResponse<span class=\"token punctuation\">,</span> JsonResponse\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        User<span class=\"token punctuation\">(</span>\n                name <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                email <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                password <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'data'</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음은 view.py를 수정해주어야한다.</p>\n<p>view.py에서는 http요청(get 또는 post)에 따라 필요한 정보를 제공하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json <span class=\"token comment\"># 요청오는 json 읽기위해 (JSON = JavaScript Object Notation)</span>\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models      <span class=\"token keyword\">import</span> User <span class=\"token comment\"># 데이터베이스 모델 불러옴</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View <span class=\"token comment\"># view 클래스 불러옴</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> HttpResponse<span class=\"token punctuation\">,</span> JsonResponse <span class=\"token comment\"># 결과 반환한것 전송하기 위해 불러옴</span></code></pre></div>\n<p>첫번째로는 모듈을 불러오는 부분이다. python에서 from을 사용하는 이유는 모듈을 통해서 내가 원하는 클래스, 함수를 정확하게 선택해서 가져오기 위함을 잘 알고있어야함을 항상 생각해야한다. 각 내용에대한 설명은 주석을 달아 놓았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span> \n        User<span class=\"token punctuation\">(</span>\n                name <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                email <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                password <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'data'</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음은 class 부분이다. 우리는 몇가지 view중 class형 view를 사용할 것이다. 함수형 view도 있긴하지만 class형 view를 쓰는 이유는 간다하고 코드가 더 깔끔해지기 때문이다 함수를 사용하게되면 매 함수코드마다 get, post를 구분하는 내용을 작성하여 구분해주어야하지만 클래스형은 view에서 알아서 다 구분해서 처리하여준다.</p>\n<p>위 예제를 보면 post와 get으로 내용이 나누어져있다. post로 받은 내용은 user의 정보를 받아 db에 저장을 하는 내용이다.\n다른 내용 증 눈에 띄는 것은 <code class=\"language-text\">data = json.loads(request.body)</code>부분이다. 우리는 front와 정보를 주고받을 때 json을 사용하는데 json은 python이 이해 할 수 있는 형식이 아니므로 모듈을 사용하여 이해할 수 있는 형태로 바꾸어주는것이다.</p>\n<p>get으로 받은 내용은 models.py의 형태를 확인해 db에서 user정보를 가지고와 그 내용을 전달해주는 함수이다.\nreturn을 보면 json을 활용함을 알 수 있고 user을 그냥 주지않고 list형 변환을 하는 이유는 불러온 그 순간에는 qurryset 상태이기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># user/urls.py</span>\nfrom django.urls <span class=\"token function\">import</span> path\n\nfrom .views      <span class=\"token function\">import</span> UserView\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span>,UserView.as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>,\n\n<span class=\"token comment\"># test01/urls.py</span>\nfrom django.urls <span class=\"token function\">import</span> path, include\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        path<span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span>, include<span class=\"token punctuation\">(</span><span class=\"token string\">'user.urls'</span><span class=\"token punctuation\">))</span>,</code></pre></div>\n<p>그 다음은 urls.py를 설정해 주면된다. 일단 user의 urls를 만들어 준다. <code class=\"language-text\">path (&#39;이름지정&#39; (자료받아올 class).as_view())</code> 이런 식으로 작성해주면 된다. <code class=\"language-text\">as_view()</code>는 views.py에서 자료받아올 class로 찾아가 get인지 post인지 판단해준다.</p>\n<p>그다음 설정이 끝났으면 최상위 usrl.py를 수정해 주어야한다. 최상위에서는 하위와 다르게 include를 사용한다. 여기서는 주소를 받으면 가장먼저 만나게 되는 곳이다. ex<code class=\"language-text\">localhost:8000/test01.urls.py</code> 이곳이 test.urls.py로 기본값은 setting에서 바꿀 수 있다.\n그다음 path를 보면 <code class=\"language-text\">path(&#39;보내줄 앱이름&#39;, include(&#39;앱이름.urls&#39;))</code>여기서는 보내줄 앱을 결정하여 해당앱의 usrls로 보내 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">localhost:8000/user\n              <span class=\"token punctuation\">(</span>test01.urls.py<span class=\"token punctuation\">)</span></code></pre></div>\n<p>urls.py에서 주의해야할 부분은 path 앞쪽의 <code class=\"language-text\">&#39;user&#39;</code>부분이다.  이 부분이 <a href=\"http://localhost:800/(user\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:800/(user</a>) 이 주소의 user부분이다. 만약 user페이지 뒤에 추가적으로 더 올 페이지가 있다면 /를 해주어야하지만 없다면 작성하지 않는다. 만약 추가적으로 페이지가 온다면 localhost:8000/user 뒤에 / 작성한다. localhost:8000/user/sign-in, profile\ntest01.urls.py가 주소 바로 뒤에 붙는다는 것은 이런 느낌인 것이다.</p>\n<p>참고 /는 경로 앞에 붙여주자. ex) localhost:8000/user, +/login</p>","fields":{"slug":"/posts/TIL-Django2","tagSlugs":["/tag/django/","/tag/til/"]},"frontmatter":{"date":"2020-04-07T23:00:00","description":"Django TIL 배운거 정리","tags":["Django","TIL"],"title":"Django TIL 2","socialImage":""}}},"pageContext":{"slug":"/posts/TIL-Django2"}}}