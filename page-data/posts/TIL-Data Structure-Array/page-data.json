{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-Data Structure-Array","result":{"data":{"markdownRemark":{"id":"c2a722e9-e16e-549c-939e-892ae791ac92","html":"<h1 id=\"arraylist\" style=\"position:relative;\"><a href=\"#arraylist\" aria-label=\"arraylist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array(List)</h1>\n<p>JavaScript에서는 Array, Python에서는 List이다.</p>\n<p>Python도 Array사용 할 수 있지만 <code class=\"language-text\">import Array</code>모듈을 import해야한다.</p>\n<h2 id=\"array의-특징\" style=\"position:relative;\"><a href=\"#array%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"array의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array의 특징</h2>\n<p>순차적으로 데이터를 저장하는 자료구조</p>\n<ul>\n<li>가장 큰 특징으로 순차적(ordered)으로 데이터를 저장한다.</li>\n<li>저장하는 데이터는 보통 요소(element)라고 한다.</li>\n<li>연결된 데이터들을 순차적으로 저장할때 사용한다.</li>\n<li>순서 상관없더라도 연결된 데이터들 저장할때 사용</li>\n<li>가장 자주 사용됨</li>\n</ul>\n<p>기타 특징</p>\n<ul>\n<li>삽입(insertion) 순서대로 저장됨 (새로 삽입되는 요소는 꼬리가됨)</li>\n<li>이미 생성된 리스트도 수정 가능(mutable)</li>\n<li>동일한 값 여러번 삽입 가능</li>\n<li>\n<p>Multi-dimentional Array(다중 차원 배열)\nArray의 요소가 array가 될 수있음 일반적으로 2D(2차원) array가 많이 사용됨</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">A <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># A[0][0] = 11</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"array-내부구조\" style=\"position:relative;\"><a href=\"#array-%EB%82%B4%EB%B6%80%EA%B5%AC%EC%A1%B0\" aria-label=\"array 내부구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array 내부구조</h2>\n<ul>\n<li>순서가 있으므로 각각의 element에 번호를 부여하는데 이 번호를 index라고 함.</li>\n<li>index는 0부터 시작되는데, 마지막부터 시작할때는 -1부터 세면서 내려간다.</li>\n</ul>\n<p>순차적으로 저장하는 이유\n실제 메모리 상에서, 즉 물리적으로 데이터가 순차적으로 저장되기 때문</p>\n<p>데이터에 순서가 있기 때문에</p>\n<ol>\n<li>index가 존재한다.\n0부터 시작하는 index</li>\n<li>Indexing\nindex를 사용해 특정 요소를 array(list)로 붙 일겅 들이는 것이 가능</li>\n<li>Slicing\n요소의 특정 부분, 즉 n번째 index부터 m번째 index까지 따로 분리해 조작 가능</li>\n</ol>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ol>\n<li>순차적으로 저장되어 있으므로 중간내역 삭제하면 인덱스 가 앞으로 이동하게되고 중간에 추가가되면 뒤로 밀리기 되므로 작업이 느려 질 수 있음 <strong>Array는 정보가 자주 삭제되거나 추가되는 데이터를 담기 적절하지 않음</strong></li>\n<li>Array Resizing으로 배열은 메모리 순차적으로 채워지므로 메모리를 미리 할당한다. 이를 pre-allocation이라고 하지만 할당한 메모리 보다 요소가 많아지면 메모리를 더 할당하는 것을 resizing이라고 함. 이 작업은 시간이 오래 걸린다.\n<strong>그러므로 Array는 사이즈 예측이 잘 안 된느 데이터를 다루기 적절치 않다.</strong></li>\n</ol>\n<h2 id=\"사용시기\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%8B%9C%EA%B8%B0\" aria-label=\"사용시기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용시기</h2>\n<ul>\n<li>\n<p>순차열적인 데이터를 저장할 때</p>\n<ul>\n<li>ex) 주식 가격. 어제의 2만원과 오늘의 2만원이 다름 >>> 값보다는 순서가 중요한 데이터</li>\n</ul>\n</li>\n<li>다차원 데이터를 다룰 때 >>> Multi-dimensional Array</li>\n<li>어떠한 특정 요소를 빠르게 읽어야 할 때 >> index를 통해 곧바로 읽을 수 있기 때문</li>\n<li>데이터의 사이즈가 급변하게 자주 변하지 않을 때</li>\n<li>요소가 자주 삭제 되거나 추가되지 않을 때</li>\n</ul>","fields":{"slug":"/posts/TIL-Data Structure-Array","tagSlugs":["/tag/data-structure/","/tag/til/"]},"frontmatter":{"date":"2020-04-08T23:00:00","description":"Data Structure TIL 배운거 정리","tags":["Data Structure","TIL"],"title":"Data Structure(Array) TIL","socialImage":""}}},"pageContext":{"slug":"/posts/TIL-Data Structure-Array"}}}