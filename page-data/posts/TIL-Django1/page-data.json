{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/TIL-Django1","result":{"data":{"markdownRemark":{"id":"982c794a-7934-5bd3-970b-c3981617700d","html":"<h1 id=\"django-1\" style=\"position:relative;\"><a href=\"#django-1\" aria-label=\"django 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 1</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> tree</code></pre></div>\n<p>tree 목록 보기 쉽게 만들어주는 플러그인이다.</p>\n<p>asgi = 비동기식\nwsgi = 웹서버, 만들때 반드시 필요한 모듈 장고,플라스크 등 다씀\nurls = url만들어서 라우팅을 해준다</p>\n<ol>\n<li>\n<p>프로젝프 만들 디렉토리 만들기\nDjango 프로젝트를 만들 디렉토리를 만든후</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">django<span class=\"token operator\">-</span>admin startproject <span class=\"token operator\">&lt;</span>프로젝트이름<span class=\"token operator\">></span>\ndjango<span class=\"token operator\">-</span>admin startproject <span class=\"token operator\">&lt;</span>프로젝트이름<span class=\"token operator\">></span> <span class=\"token punctuation\">.</span></code></pre></div>\n<p>django-admin startproject &#x3C;프로젝트이름> 을 하면 아래의 트리처럼 되면서 프로젝트 이름의 폴더를\n새로 만들고 그안에 파일을 생성하지만 끝에 .(dot)을 찍으면 현재 폴더에서 만들겠다는 뜻이 된다.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">├── manage.py\n└── test01\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py</code></pre></div>\n<p>위와 같은 트리형태로 초기 설정이된다. 기본적으로 이 프로젝트에서 최상위 위치는 <code class=\"language-text\">manage.py</code>가 있는 위치가 된다.</p>\n<p>초기 세팅이 되고나면, settings.py를 설정해 주어야한다.</p>\n<p><code class=\"language-text\">settings.py</code> = 프로젝트의 셋팅값에 따라 프로젝트의 방향 정해짐 (제일 먼저 보게됨)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import os - manage.py가 있는 장소를 최상위 경로로 만들기위해 사용 (BASE_DIR)\n\nSECRET_KEY = 사용안함 보안위험 함부러 관리하지 말것\n\nDEBUG = True 오류페이지 보여줄지 여부, 개발할때만 사용, 배포할때 무조건 끌것\n\nALOOWED_HOSTS = [&#39;*&#39;] - &#39;*&#39;(모두 들어올수 있게끔함), 한국의 ip대역 넣는 식으로 들어올 수 있는 사용자 제어함.\n\nINSTALLED_APPS = [] - django에 내장된 기능들로 admin, auth 사용하지 않는다.\n\nMIDDLEWARE = [] Auth,Csrf(위장 피하기위해서 사용, 위장페이지 검사) # 주석처리할것\n\nROOT_URLCONF = 최상위 url 설정 &#39;test01.urls&#39; ex)localhost:8000/test01.url 호출됨\n\nTEMPLATES = HTML CSS 만들어주는 것이지만 지우지는 않는다.\n\nWSGI_APPLICANTION = \n\nDATABASES = SQLITE3 관계형 데이터베이스, 파이썬 설치시 같이 설치되며 django에서 기본으로 지원\n\nAUTH_PASSWARD\n\nLANGUAGE_CODE = 지원언어\n\nTIME_ZONE = &#39;asia/seoul&#39; utc 지원하지만 +9 -9 단순히 붙이는 걸로는 안됨\n\nUSE_I18N = 다국어지원\n\nUSE_L10N = 다국어지원\n\nUSET_TZ = 서버 시간?\n\nSTATIC_URL = 정적 페이지주소 파일 같은거 받을 때 사용\n\n&#39;django.contrib.admin&#39; 지우면 url 설정 바꿔줘야함 import admin으로 된것</code></pre></div>\n<p>세팅이 끝났으면</p>\n<div class=\"gatsby-highlight\" data-language=\"django\"><pre class=\"language-django\"><code class=\"language-django\">python manage.py startapp user</code></pre></div>\n<p>startapp 명령어를 통해 만들기 원하는 앱을 만들 준비를 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">├── db.sqlite3\n├── manage.py\n├── test01\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-38.pyc\n│   │   ├── settings.cpython-38.pyc\n│   │   ├── urls.cpython-38.pyc\n│   │   └── wsgi.cpython-38.pyc\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── user\n    ├── __init__.py\n    ├── admin.py\n    ├── apps.py\n    ├── migrations\n    │   └── __init__.py\n    ├── models.py\n    ├── tests.py\n    └── views.py</code></pre></div>\n<p>그러면 이러한 형태가 되는데 test01의 urls.py를 user에 복사한다.</p>\n<p>새로운 앱을 만들었는데 새로만들어진 앱은 django가 인식하지 못한다. setting.py에서 INSTALLED_APPS 에 추가해준다.\n추가할 앱이름의 폴더가 user라면 ‘user’라고 작성하면 된다.</p>\n<p>여기까지 설정을 마치면 데이터 베이스의 모델을 만들어 주어야한다. 그렇게 하기위해 <code class=\"language-text\">models.py</code>를 설정해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># models.py</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models <span class=\"token comment\">#orm 수행</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#User는 models.Model의 서브클래스임</span>\n    name     <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    email    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    password <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n    created_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    updated_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">#django의 >편의성기능 중 하나 now_add 최초 한번만 기록 수정안함, auto_now 업데이>트 될 때마다 업데이트함</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'users'</span>  <span class=\"token comment\"># 데이터 베이스 이름 지정, 기록안하면 \"app이름_클래스명\"으로 만듦</span></code></pre></div>\n<p>위는 간단한 데이터베이스 모델을 만든 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"django\"><pre class=\"language-django\"><code class=\"language-django\">python manage.py makemigrations <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>앱이름</span><span class=\"token punctuation\">></span></span> </code></pre></div>\n<p>models migration 할시 앱이름 꼭 작성해야한다. 그렇지 않으면 모든 앱들을 migration을 시켜 순서가 꼬여 곤란해 질 수 있다.</p>\n<p>migration한 파일들은 해당앱 migrations폴더에 저장된다. makemigrations를 한다는 것은 해당 app의 models.py안 클래스에 코딩해놓은 테이블 기반으로 Django에서 쓸수있게 장고에서 따로 메타데이터로 만들어놓는 것이다. 그렇게해야 테이블구조 생김 migrations 폴더에 파일을생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python manage.py migrate user 0001</code></pre></div>\n<p>방금전 migration한 내용을 바탕으로 데이터베이스에 실제로 테이블을 만들어주는 것이 migrate이다.</p>","fields":{"slug":"/posts/TIL-Django1","tagSlugs":["/tag/django/","/tag/til/"]},"frontmatter":{"date":"2020-04-02T22:40:32.169Z","description":"Django TIL 배운거 정리","tags":["Django","TIL"],"title":"Django TIL 1","socialImage":""}}},"pageContext":{"slug":"/posts/TIL-Django1"}}}