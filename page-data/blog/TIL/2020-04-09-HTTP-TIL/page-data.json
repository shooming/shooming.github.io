{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/TIL/2020-04-09-HTTP-TIL/","result":{"pageContext":{"article":{"banner":{"alt":"TIL","caption":"Photo by <u><a href=\"https://wonkooklee.github.io/thumbnail_maker/\">Thumbnail Maker</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h661V0H0v200m211-13c0%206%200%207-1%206-10-4-19%203-19%2015s9%2019%2018%2014h4l3%201h2v-44h-7v8m311-8v8c0%207%200%207-2%206-11-4-20%205-19%2018%202%2011%2010%2016%2019%2011%202-2%203-2%203%200l3%201h2v-42c1-2-5-3-6-2m-394%207c0%202%200%202%206%202h6v35h7v-35h6l5-1%201-2c0-2-2-2-15-2h-16v3m171%2017v20h7v-40h-7v20m29%200v20h24v-5h-17v-35h-7v20m-164-8c-11%209-7%2027%207%2029%2014%201%2021-20%209-29-4-4-12-4-16%200m66-2c-3%202-4%203-2%206h4c5-3%207-2%209%200%203%203%202%205-2%205-8%200-15%206-14%2012%202%207%208%2010%2015%206h4l3%201h2v-13c0-12%200-12-3-15s-10-4-16-2m134%200c-10%204-12%2022-3%2028%206%205%2020%203%2018-2%200-2-1-2-2-2-8%203-13%202-15-4l-1-3h20v-3c0-11-8-18-17-14m26%201c-4%201-5%202-3%204%201%202%202%202%205%201%205-3%208-2%2010%200%201%203%201%205-2%205-8%200-15%205-15%2011%200%208%207%2011%2015%207%203-2%204-2%204-1s1%202%203%202h2v-12c0-16-2-19-11-19l-8%202m36%201c-3%202-3%202-3%200s-1-2-3-2h-3v30h7v-10c0-11%202-15%207-15%203%200%204-1%204-5%200-2-6-1-9%202m23-1c-3%202-4%202-4%201l-2-2h-3v30h6v-11c0-12%201-13%206-14%205-2%206%201%206%2014v11h7v-10c0-11-1-17-4-19-3-3-9-2-12%200m31-1c-10%203-12%2021-4%2028%207%205%2023%203%2019-2-1-2-2-2-5-1-4%202-9%200-11-3-3-5-3-5%208-5h10v-3c0-11-8-18-17-14m-226%201l1%203%2010%2027c0%203-5%207-7%207-1-1-2%200-2%202-1%203%201%203%205%203%206-1%208-5%2014-24l7-18-3-1c-4%200-5%201-8%2016l-2%206-4-10c-4-12-4-12-8-12l-3%201m-85%204c-4%201-5%2012-3%2017%203%205%2010%205%2012-1%204-9-2-19-9-16m33%200c-6%203-6%2018%201%2020%205%202%207%200%208-10v-9c-2-1-6-2-9-1m311%200c-3%201-5%206-5%2010%200%209%206%2013%2012%208%202-2%203-15%201-17-2-1-6-2-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png","srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/41200/TIL.png 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/f979a/TIL.png 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/322ad/TIL.webp 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/de3b3/TIL.webp 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/2b2b5/TIL.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<h1>HTTP</h1>\n<h2>HTTP란?</h2>\n<p>http : hypertext tranfer protocol의 약자로 HTML을 전송할때 공통된 규칙에 의해 서로 원할한 소통을 하기위해 만들어진 통신 규약이다.\n예를 들면 말을 하게되면 서로가 알아들을 수 있어야 하지 않은가 말은 어떻게 하는가? 그냥 소리만 지른다고 알수는 없다. 한국어, 영어, 프랑스어 등 정해진 규칙, 문법에 따라 말해야할 것이다 HTML의 통신도 이와 비슷하다고 보면 된다.</p>\n<p>즉 대상이 server가되고 server끼리는 공통의 언어로 말한다고 생각하면된다.</p>\n<p>http에는 받는대상, 제목 , 주소, 내용, 보내는 대상들이 들어가있어 마치 편지와 비슷하다고 볼 수있다.</p>\n<p>HTTP는 TCP/IP의 기반위에 만들어져 있다.</p>\n<h2>HTTP의 핵심요소</h2>\n<p>HTTP에는 2가지 큰 특징이 있다.</p>\n<ol>\n<li>\n<p>HTTP는 기본적으로 요청/응답(request/response)구조로 되어있다.</p>\n<ul>\n<li>클라이언트가 rquest를 보내면 서버는 responser를 보내는 구조다</li>\n<li>모든 통신이 요청과 응답으로 이루어 진다.</li>\n</ul>\n</li>\n<li>\n<p>HTTP는 Stateless 이다.</p>\n</li>\n</ol>\n<p>말 그대로 상태를 저장하지 않는다는 뜻으로 독립적인 통신을 하므로 현재 이루어진 통신은 이전의 통신을 기억하지 못한다\n즉 내가 내용을 보내서 인증 처리했더라도 이 통신이 끝나면 그것으로 끝이다 지속적으로 유지하려고 해도 다시 인증시켜 주어야한다.\n대표적인 예로는 로그인이 있다 로그인은 로그인에 필요한 id / password를 서버에 보내고 인증을 받은 뒤 통신을 끝내면 끝이다 Stateless임으로 통신내용을 저장하지 않기 때문이다. 그래서 지속적인 로그인 정보를 요구 할것이다. 그래서 쿠키나 세션이라는 곳에 로그인 정보(토큰값)을 저장하여 요청에 대한 정보를 담고있다가 매 통신시 HTTP header나 body에 첨부하여 보내게된다. (이러한 정보는 성격상 header에 붙는게 맞다)</p>\n<h2>HTTP의 구조</h2>\n<p>HTTP는 request(요청), respose(응답) 2가지 경우가 있고 2가지 경우는 각각 3부분으로 구성되어 있다.</p>\n<h3>HTTP Request 메시지</h3>\n<ul>\n<li>status line</li>\n<li>headers</li>\n<li>body</li>\n</ul>\n<p>Request의 큰 구조이다</p>\n<ol>\n<li>status line\n<ul>\n<li>HTTP Method\n요청의 행동을 정의한다. (get-데이터 줘, post - 데이터 생성해)</li>\n<li>Request target\n보낼 주소로 uri를 말하며 큰 주소뒤에 붙는 상세주소라고 보면 쉽다.\n(ex : <a href=\"http://www.tset.com/login\">www.tset.com/login</a> <code>/login</code>부분이라고 보면된다.)</li>\n<li>http viersion\nhttp의 버전 주로 1.1대를 사용 중이고 간혹 2사용하긴한다, 현재 3버전까지 나옴</li>\n</ul>\n</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"http\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">GET /search HTTP/1.1</span></span></code></pre>\n<p>위와 같은 형태가 된다.</p>\n<ol start=\"2\">\n<li>Headers\n<ul>\n<li>메타정보, 요청에대한 부가정보로 되어있음, key:value의 형태로 되어있다.</li>\n<li>Headers도 크게 3부분으로 나뉘어진다.(general headers, request headers, entity headers)</li>\n<li>자주 사용되는 header 정보들이 있다.\n<ul>\n<li>host : google.com / 김 아파트 라는 아파트로 가야함 근데 어디로 가는지 모름(동면읍, 몇동, 몇호) 그래서 status line의 target이 알려준다.</li>\n</ul>\n</li>\n<li>User-Agent : 클라이언트 정보 담김</li>\n<li>Connection : 요청 끝난후 클라이언트와 서버 계속 연결 유지할지 여부</li>\n<li>Content-Type : 해당 요청이 보내는 메세지 body의 타입. 예를 들어, JSON을 보내면 application/jso</li>\n<li>Content-Length: 메세지 body의 길이</li>\n</ul>\n</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"http\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Accept: */*</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Accept-Encoding: gzip, deflate</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Connection: keep-alive</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Content-Type: application/json</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Content-Length: 257</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Host: google.com</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">User-Agent: HTTPie/0.9.3</span></span></code></pre>\n<ol start=\"3\">\n<li>body\n<ul>\n<li>해당 reqeust의 실제 내용들이 담긴다.</li>\n<li>Body가 없는 request도 많은데 GET 요청이 보통 정보를 요구하기 때문에 내용이 없는 경우가 많다.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"http\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    &quot;imp_uid&quot;: &quot;imp_1234567890&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    &quot;merchant_uid&quot;: &quot;order_id_8237352&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    &quot;status&quot;: &quot;paid&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h3>HTTP Response 구조</h3>\n<ul>\n<li>Status line</li>\n<li>Headers</li>\n<li>Body</li>\n</ul>\n<p>Response의 큰 구조이다. Request와 비슷한 구조이다.</p>\n<ol>\n<li>Status line\n<ul>\n<li>http viersion\nRequest와는 다르게 앞에 온다.</li>\n<li>Status code\n응답상태 나타내는 숫자코드  ex) 200</li>\n<li>Status text\n응답 상태 간략히 설정 ex)Not Found</li>\n</ul>\n</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"http\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">HTTP/1.1 404 Not Found</span></span></code></pre>\n<ol start=\"2\">\n<li>Heder\n<ul>\n<li>Response의 headers와 동일하다.</li>\n</ul>\n-다만 response에서만 사용되는 header 값들이 있다\n예로는 <code>User-Agent</code> 대신 Server 헤더가 사용된다.</li>\n<li>Body\n<ul>\n<li>Response의 body와 일반적으로 동일하다. 요청에대한 값은 보냄</li>\n<li>Request와 마찬가지로 모든 body가 있지않고 데이터 전송 할 필요 없다면 비어있게된다.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"http\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">HTTP/1.1 404 Not Found</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Connection: close</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Content-Length: 1573</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Content-Type: text/html; charset=UTF-8</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Date: Mon, 20 Aug 2018 07:59:05 GMT</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">&lt;!DOCTYPE html&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">&lt;html lang=en&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;meta charset=utf-8&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;meta name=viewport content=&quot;initial-scale=1, minimum-scale=1, width=device-width&quot;&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;title&gt;Error 404 (Not Found)!!1&lt;/title&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;style&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    *{margin:0;padding:0}html,code{font:15px/</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    .....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;p&gt;The requested URL &lt;code&gt;/payment-sync&lt;/code&gt;</span></span></code></pre>\n<h2>자주 쓰이는 HTTP Methods</h2>\n<ul>\n<li>get(정보 가져올때)</li>\n<li>post(데이터의 변화가 필요할때 /생성/수정/삭제 등)</li>\n<li>PUT(post와 비슷함, 잘사용안하지만 굳이 나누면 post만들 때 PUT 수정할때)</li>\n<li>DELETE(내용을 삭제할 때)</li>\n</ul>\n<p>status code 개발자가 결정하는 것으로 잘 알아두어야함</p>\n<h2>자주 쓰이는 HTTP Status Code</h2>\n<p>200 ok</p>\n<ul>\n<li>문제없이 실행됬을 때 보여짐</li>\n</ul>\n<p>301 Moved Permanently</p>\n<ul>\n<li>해당 URL이 다른 주소로 바뀌었을 때</li>\n</ul>\n<p>400 Bad Request</p>\n<ul>\n<li>잘못된 요청 받았을때\nex) 숫자만 받아야하는데 text가 올때</li>\n</ul>\n<p>401 Unauthorized</p>\n<ul>\n<li>유저가 요청 진행하려면 로그인, 회원가입 해야하는 것을 나타낼때 쓰는 코드</li>\n</ul>\n<p>404 찾을 수 있는 이유 host가 있어서 host에서 알려줌, 그러나 host주소도 잘못 쓰면 응답이 되지 않는다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","categories":["HTTP"],"date":"April 09, 2020","description":"HTTP TIL 배운거 정리","id":"c93f2cda-5cfa-5508-b6d0-065073027ffe","keywords":["HTTP","TIL"],"slug":"/blog/TIL/2020-04-09-HTTP-TIL/","title":"HTTP TIL","readingTime":{"text":"8 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}