{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/TIL/2020-04-07-Django2-TIL/","result":{"pageContext":{"article":{"banner":{"alt":"TIL","caption":"Photo by <u><a href=\"https://wonkooklee.github.io/thumbnail_maker/\">Thumbnail Maker</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h661V0H0v200m211-13c0%206%200%207-1%206-10-4-19%203-19%2015s9%2019%2018%2014h4l3%201h2v-44h-7v8m311-8v8c0%207%200%207-2%206-11-4-20%205-19%2018%202%2011%2010%2016%2019%2011%202-2%203-2%203%200l3%201h2v-42c1-2-5-3-6-2m-394%207c0%202%200%202%206%202h6v35h7v-35h6l5-1%201-2c0-2-2-2-15-2h-16v3m171%2017v20h7v-40h-7v20m29%200v20h24v-5h-17v-35h-7v20m-164-8c-11%209-7%2027%207%2029%2014%201%2021-20%209-29-4-4-12-4-16%200m66-2c-3%202-4%203-2%206h4c5-3%207-2%209%200%203%203%202%205-2%205-8%200-15%206-14%2012%202%207%208%2010%2015%206h4l3%201h2v-13c0-12%200-12-3-15s-10-4-16-2m134%200c-10%204-12%2022-3%2028%206%205%2020%203%2018-2%200-2-1-2-2-2-8%203-13%202-15-4l-1-3h20v-3c0-11-8-18-17-14m26%201c-4%201-5%202-3%204%201%202%202%202%205%201%205-3%208-2%2010%200%201%203%201%205-2%205-8%200-15%205-15%2011%200%208%207%2011%2015%207%203-2%204-2%204-1s1%202%203%202h2v-12c0-16-2-19-11-19l-8%202m36%201c-3%202-3%202-3%200s-1-2-3-2h-3v30h7v-10c0-11%202-15%207-15%203%200%204-1%204-5%200-2-6-1-9%202m23-1c-3%202-4%202-4%201l-2-2h-3v30h6v-11c0-12%201-13%206-14%205-2%206%201%206%2014v11h7v-10c0-11-1-17-4-19-3-3-9-2-12%200m31-1c-10%203-12%2021-4%2028%207%205%2023%203%2019-2-1-2-2-2-5-1-4%202-9%200-11-3-3-5-3-5%208-5h10v-3c0-11-8-18-17-14m-226%201l1%203%2010%2027c0%203-5%207-7%207-1-1-2%200-2%202-1%203%201%203%205%203%206-1%208-5%2014-24l7-18-3-1c-4%200-5%201-8%2016l-2%206-4-10c-4-12-4-12-8-12l-3%201m-85%204c-4%201-5%2012-3%2017%203%205%2010%205%2012-1%204-9-2-19-9-16m33%200c-6%203-6%2018%201%2020%205%202%207%200%208-10v-9c-2-1-6-2-9-1m311%200c-3%201-5%206-5%2010%200%209%206%2013%2012%208%202-2%203-15%201-17-2-1-6-2-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png","srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/41200/TIL.png 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/f979a/TIL.png 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/322ad/TIL.webp 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/de3b3/TIL.webp 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/2b2b5/TIL.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<h1>Django 2</h1>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">python manage.py showmigrations</span></span></span></code></pre>\n<p>위 명령어를 통해 앞전에서 보았던 migration 했던것에 대한 상태를 확인 할 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">------------------ 아직 마이그레이션을 안했을 경우</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">contenttypes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> [ ] 0001_initial</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> [ ] 0002_remove_content_type_name</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sessions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> [ ] 0001_initial</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> [ ] 0001_initial</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">------------------ 정상적으로 마이그레이션 됬을 경우</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">contenttypes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> [X] 0001_initial</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> [X] 0002_remove_content_type_name</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sessions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> [X] 0001_initial</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> [X] 0001_initial</span></span></span></code></pre>\n<p>위와 같이 migration여부가 X표시로 되어있어 어느 부분이 안됬는지 바로 확인이 가능하다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sqlite3 db.sqlite3</span></span></span></code></pre>\n<p>sqlite3 데이터베이스 실행시키는 명령문으로 실행 후 .tables 명령어로 만들어진 데이터베이스들의 목록을 확인할 수 있다.\n<code>sqlite3</code>만 치고 들어와서 <code>.open db.sqlite3</code>를 쳐도 똑같이 활용할 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sqlite</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\"> .tables</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">django_content_type  django_session     </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">django_migrations    users  </span></span></span></code></pre>\n<p>.tables를 치면 생성된 데이터베이스들 나오는데 users를 제외한 3개는 원래 기본적으로 존재하는 것들이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">python manage.py shell</span></span></span></code></pre>\n<p>해당 명령어를 사용하면 python shell을 사용할 수 있게된다. python shell임으로 from imort가 가능하고 명령어를 쳐서 미리 확인 해 볼 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> user.model </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> User</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">User.objects.create(</span><span class=\"mtk19 mtki\">name</span><span class=\"mtk7\">=</span><span class=\"mtk11\">&#39;기차&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">email</span><span class=\"mtk7\">=</span><span class=\"mtk11\">&#39;자동차@비행기.com&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">password</span><span class=\"mtk7\">=</span><span class=\"mtk11\">&#39;1234&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">d </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> User(</span><span class=\"mtk19 mtki\">name</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;고구마&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">email</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;감자@양파.net&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">password</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;1234&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">d.save()</span></span></span></code></pre>\n<p>위의 명령어를 사용하면 User 객체를 만들어 데이터 베이스에 저장을 한다.\n다만 위와 아래의 명령어 사용법이 조금 다른데 명령어를 사용하는가? 아니면 class에 인자를 직접 전달하는가에 차이이다. 여기서 인자를 전달하되면 <code>.save()</code>를 해주어야한다. 그렇지 않으면 저장되지 않기 때문이다. <code>.save()</code>는 d 객체를 만들때 뒤에 붙여도 되는데 그렇게되면 save 되면서 d에는 아무값도 남지 않게 된다.</p>\n<p>아래는 DB에서 객체를 불러오는 명령어들이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">User.objects.all</span><span class=\"mtk1\">() </span><span class=\"mtk3\"># 모든 object 형태로 들어옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">User.objects.values</span><span class=\"mtk1\">() </span><span class=\"mtk3\"># 딕셔너리의 형태로 들어옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">User.objects.get</span><span class=\"mtk1\">() </span><span class=\"mtk3\"># 무조건 인자 하나는 꼭 들어가야함, object형태로 들어옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">User.objects.filter</span><span class=\"mtk1\">()  </span><span class=\"mtk3\"># 원하는 집합을 구할때 필요</span></span></span></code></pre>\n<p>위 명령어로 작성하다보면 <code>&#x3C;QuerySet[]></code>으로 나오는 내용들이 있는데 <code>&#x3C;QuerySet[]></code>있으면 뒤에 추가적인 작업 할 수 있라는 내용이 되며, Django ORM에서 지원하는 것이다. query를 리스트형태로 만드는 이유는 많이 데이터를 받기위해서이다. 그리고 마지막 데이터 상태가 아님을 의미하기도 한다. list()형변환하면 QuerySet이 아니게된다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">a </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> User.objects.all() </span><span class=\"mtk3\">#  list형태로 담겨있음</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">a[</span><span class=\"mtk4\">0</span><span class=\"mtk1\">].name </span><span class=\"mtk3\"># 객체하나하나가 list형태로 되어있으므로 원하는 객체하나 불러오고 .name으로 객체내의 내용을 불러오기함</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">b </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> User.objects.values() </span><span class=\"mtk3\"># list + dictionary 조합으로 되어있음</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">b[</span><span class=\"mtk4\">0</span><span class=\"mtk1\">][</span><span class=\"mtk11\">&#39;name&#39;</span><span class=\"mtk1\">] </span><span class=\"mtk3\"># list의 객체들이 dictionary 조합으로 되어있어서 key값으로 불러와야함</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">c </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> User.objects.get() </span><span class=\"mtk3\"># 객체만 담겨있다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">c.name </span><span class=\"mtk3\"># 객체만 담겨있으므로 담겨있는 내용 불러오기 위해 dot notation을 사용한다.</span></span></span></code></pre>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># user/view.py</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> .models      </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> User</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> django.views </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> View</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> django.http  </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> HttpResponse, JsonResponse</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">UserView</span><span class=\"mtk1\">(</span><span class=\"mtk6 mtki mtku\">View</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">post</span><span class=\"mtk1\">(</span><span class=\"mtk19 mtki\">self</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">request</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        data </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> json.loads(request.body)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        User(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk19 mtki\">name</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;name&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk19 mtki\">email</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;email&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk19 mtki\">password</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;password&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ).save()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> HttpResponse(</span><span class=\"mtk19 mtki\">status</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">200</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">get</span><span class=\"mtk1\">(</span><span class=\"mtk19 mtki\">self</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">request</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        user </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> User.objects.values()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> JsonResponse({</span><span class=\"mtk11\">&#39;data&#39;</span><span class=\"mtk1\"> : </span><span class=\"mtk15 mtki\">list</span><span class=\"mtk1\">(user)}, </span><span class=\"mtk19 mtki\">status</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">200</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>그 다음은 view.py를 수정해주어야한다.</p>\n<p>view.py에서는 http요청(get 또는 post)에 따라 필요한 정보를 제공하게 된다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> json </span><span class=\"mtk3\"># 요청오는 json 읽기위해 (JSON = JavaScript Object Notation)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> .models      </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> User </span><span class=\"mtk3\"># 데이터베이스 모델 불러옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> django.views </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> View </span><span class=\"mtk3\"># view 클래스 불러옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> django.http  </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> HttpResponse, JsonResponse </span><span class=\"mtk3\"># 결과 반환한것 전송하기 위해 불러옴</span></span></span></code></pre>\n<p>첫번째로는 모듈을 불러오는 부분이다. python에서 from을 사용하는 이유는 모듈을 통해서 내가 원하는 클래스, 함수를 정확하게 선택해서 가져오기 위함을 잘 알고있어야함을 항상 생각해야한다. 각 내용에대한 설명은 주석을 달아 놓았다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">UserView</span><span class=\"mtk1\">(</span><span class=\"mtk6 mtki mtku\">View</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">post</span><span class=\"mtk1\">(</span><span class=\"mtk19 mtki\">self</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">request</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        data </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> json.loads(request.body) </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        User(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk19 mtki\">name</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;name&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk19 mtki\">email</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;email&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk19 mtki\">password</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;password&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ).save()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> HttpResponse(</span><span class=\"mtk19 mtki\">status</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">200</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">get</span><span class=\"mtk1\">(</span><span class=\"mtk19 mtki\">self</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">request</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        user </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> User.objects.values()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> JsonResponse({</span><span class=\"mtk11\">&#39;data&#39;</span><span class=\"mtk1\"> : </span><span class=\"mtk15 mtki\">list</span><span class=\"mtk1\">(user)}, </span><span class=\"mtk19 mtki\">status</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">200</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>그 다음은 class 부분이다. 우리는 몇가지 view중 class형 view를 사용할 것이다. 함수형 view도 있긴하지만 class형 view를 쓰는 이유는 간다하고 코드가 더 깔끔해지기 때문이다 함수를 사용하게되면 매 함수코드마다 get, post를 구분하는 내용을 작성하여 구분해주어야하지만 클래스형은 view에서 알아서 다 구분해서 처리하여준다.</p>\n<p>위 예제를 보면 post와 get으로 내용이 나누어져있다. post로 받은 내용은 user의 정보를 받아 db에 저장을 하는 내용이다.\n다른 내용 증 눈에 띄는 것은 <code>data = json.loads(request.body)</code>부분이다. 우리는 front와 정보를 주고받을 때 json을 사용하는데 json은 python이 이해 할 수 있는 형식이 아니므로 모듈을 사용하여 이해할 수 있는 형태로 바꾸어주는것이다.</p>\n<p>get으로 받은 내용은 models.py의 형태를 확인해 db에서 user정보를 가지고와 그 내용을 전달해주는 함수이다.\nreturn을 보면 json을 활용함을 알 수 있고 user을 그냥 주지않고 list형 변환을 하는 이유는 불러온 그 순간에는 qurryset 상태이기 때문이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># user/urls.py</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">from django.urls import path</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">from .views      import UserView</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">urlpatterns = [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">path(&#39;&#39;,UserView.as_view</span><span class=\"mtk1\">()),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># test01/urls.py</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">from django.urls import path, include</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">urlpatterns </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        path(</span><span class=\"mtk11\">&#39;user&#39;</span><span class=\"mtk1\">, include(</span><span class=\"mtk11\">&#39;user.urls&#39;</span><span class=\"mtk1\">)),</span></span></span></code></pre>\n<p>그 다음은 urls.py를 설정해 주면된다. 일단 user의 urls를 만들어 준다. <code>path ('이름지정' (자료받아올 class).as_view())</code> 이런 식으로 작성해주면 된다. <code>as_view()</code>는 views.py에서 자료받아올 class로 찾아가 get인지 post인지 판단해준다.</p>\n<p>그다음 설정이 끝났으면 최상위 usrl.py를 수정해 주어야한다. 최상위에서는 하위와 다르게 include를 사용한다. 여기서는 주소를 받으면 가장먼저 만나게 되는 곳이다. ex<code>localhost:8000/test01.urls.py</code> 이곳이 test.urls.py로 기본값은 setting에서 바꿀 수 있다.\n그다음 path를 보면 <code>path('보내줄 앱이름', include('앱이름.urls'))</code>여기서는 보내줄 앱을 결정하여 해당앱의 usrls로 보내 준다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">localhost:8000/user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              (test01.urls.py)</span></span></span></code></pre>\n<p>urls.py에서 주의해야할 부분은 path 앞쪽의 <code>'user'</code>부분이다.  이 부분이 <a href=\"http://localhost:800/(user)\">http://localhost:800/(user)</a> 이 주소의 user부분이다. 만약 user페이지 뒤에 추가적으로 더 올 페이지가 있다면 /를 해주어야하지만 없다면 작성하지 않는다. 만약 추가적으로 페이지가 온다면 localhost:8000/user 뒤에 / 작성한다. localhost:8000/user/sign-in, profile\ntest01.urls.py가 주소 바로 뒤에 붙는다는 것은 이런 느낌인 것이다.</p>\n<p>참고 /는 경로 앞에 붙여주자. ex) localhost:8000/user, +/login</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .abyss .mtki { font-style: italic; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .mtk19 { color: #2277FF; }\n  .abyss .mtk11 { color: #22AA44; }\n  .abyss .mtk6 { color: #DDBB88; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .mtk4 { color: #F280D0; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .mtk5 { color: #FFEEBB; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","categories":["Django"],"date":"April 07, 2020","description":"Django TIL 배운거 정리","id":"9ef9543e-1032-5d84-aa39-942cbd25a86c","keywords":["Django","TIL"],"slug":"/blog/TIL/2020-04-07-Django2-TIL/","title":"Django TIL 2","readingTime":{"text":"10 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}