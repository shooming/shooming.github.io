{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/TIL/2020-05-11-Django_ORM_CRUD/","result":{"pageContext":{"article":{"banner":{"alt":"TIL","caption":"Photo by <u><a href=\"https://wonkooklee.github.io/thumbnail_maker/\">Thumbnail Maker</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h661V0H0v200m211-13c0%206%200%207-1%206-10-4-19%203-19%2015s9%2019%2018%2014h4l3%201h2v-44h-7v8m311-8v8c0%207%200%207-2%206-11-4-20%205-19%2018%202%2011%2010%2016%2019%2011%202-2%203-2%203%200l3%201h2v-42c1-2-5-3-6-2m-394%207c0%202%200%202%206%202h6v35h7v-35h6l5-1%201-2c0-2-2-2-15-2h-16v3m171%2017v20h7v-40h-7v20m29%200v20h24v-5h-17v-35h-7v20m-164-8c-11%209-7%2027%207%2029%2014%201%2021-20%209-29-4-4-12-4-16%200m66-2c-3%202-4%203-2%206h4c5-3%207-2%209%200%203%203%202%205-2%205-8%200-15%206-14%2012%202%207%208%2010%2015%206h4l3%201h2v-13c0-12%200-12-3-15s-10-4-16-2m134%200c-10%204-12%2022-3%2028%206%205%2020%203%2018-2%200-2-1-2-2-2-8%203-13%202-15-4l-1-3h20v-3c0-11-8-18-17-14m26%201c-4%201-5%202-3%204%201%202%202%202%205%201%205-3%208-2%2010%200%201%203%201%205-2%205-8%200-15%205-15%2011%200%208%207%2011%2015%207%203-2%204-2%204-1s1%202%203%202h2v-12c0-16-2-19-11-19l-8%202m36%201c-3%202-3%202-3%200s-1-2-3-2h-3v30h7v-10c0-11%202-15%207-15%203%200%204-1%204-5%200-2-6-1-9%202m23-1c-3%202-4%202-4%201l-2-2h-3v30h6v-11c0-12%201-13%206-14%205-2%206%201%206%2014v11h7v-10c0-11-1-17-4-19-3-3-9-2-12%200m31-1c-10%203-12%2021-4%2028%207%205%2023%203%2019-2-1-2-2-2-5-1-4%202-9%200-11-3-3-5-3-5%208-5h10v-3c0-11-8-18-17-14m-226%201l1%203%2010%2027c0%203-5%207-7%207-1-1-2%200-2%202-1%203%201%203%205%203%206-1%208-5%2014-24l7-18-3-1c-4%200-5%201-8%2016l-2%206-4-10c-4-12-4-12-8-12l-3%201m-85%204c-4%201-5%2012-3%2017%203%205%2010%205%2012-1%204-9-2-19-9-16m33%200c-6%203-6%2018%201%2020%205%202%207%200%208-10v-9c-2-1-6-2-9-1m311%200c-3%201-5%206-5%2010%200%209%206%2013%2012%208%202-2%203-15%201-17-2-1-6-2-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png","srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/41200/TIL.png 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/f979a/TIL.png 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/322ad/TIL.webp 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/de3b3/TIL.webp 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/2b2b5/TIL.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<h1>Django ORM CRUD</h1>\n<h2>DB 조회</h2>\n<p>Django ORM은 <code>모델클래스.objects</code> 이라는 Manager가 제공됨</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.all() </span><span class=\"mtk3\"># AAA테이블의 모든 데이터 객체상태로 가져옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.get() </span><span class=\"mtk3\"># AAA테이블의 get 조건에 부합하는 row하나 가져옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.filter() </span><span class=\"mtk3\"># AAA테이블의 filter 조건에 해당하는 row 다 가져옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.values() </span><span class=\"mtk3\"># AAA테이블의 모든 데이터 가져오지만 객체상태 아님</span></span></span></code></pre>\n<h3>filter의 AND조건</h3>\n<p>Django ORM은 filter를 통해서 원하는 정보들만 가져올 수 있는데 AND나 OR조 건을 이용해 내가원하는 조건들의 범위를 좁힐 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.filter(</span><span class=\"mtk19 mtki\">colum</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 원하는값, colum </span><span class=\"mtk4\">2</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 원하는값)</span></span></span></code></pre>\n<p>AND 조건은 별다른 방법없이 <code>,</code>(콤마)를 사용해서 계족 추가해주면된다.</p>\n<h3>filter의 OR조건</h3>\n<p>OR은 AND와는 다르게 Q객체를 import 해주어야한다. 물론 Q객체를 활용한 AND조건도 사용이 가능하다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.filer(Q(</span><span class=\"mtk19 mtki\">colum</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 조건) </span><span class=\"mtk7\">|</span><span class=\"mtk1\"> Q(</span><span class=\"mtk19 mtki\">colum2</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 조건))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.filter(Q(</span><span class=\"mtk19 mtki\">colum</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 조건) </span><span class=\"mtk7\">&amp;</span><span class=\"mtk1\"> Q(</span><span class=\"mtk19 mtki\">colum2</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 조건))</span></span></span></code></pre>\n<h2>CREAT</h2>\n<p>DB에 새로운 데이터를 만드는 방법은 2가지가 있다.\nviews.py에서 사용하기위해서는 models.py에 모델이 만들어져 있어야하며 해당 파일이 views.py에 import되어 있어야한다.</p>\n<ol>\n<li>장고 ORM을 활용하여 CREAT 하는 방법</li>\n<li>변수에 담고 save함수를 사용하는 법</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.create(</span><span class=\"mtk19 mtki\">컬럼명1</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 값, </span><span class=\"mtk19 mtki\">컬럼명2</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 값)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">OH</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> AAA(</span><span class=\"mtk19 mtki\">컬럼명1</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 값, </span><span class=\"mtk19 mtki\">컬럼명2</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> 값)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">OH</span><span class=\"mtk1\">.save()</span></span></span></code></pre>\n<h2>UPDATE</h2>\n<p>UPDATE 또한 2가지 방법을 이용한다.\n조건은 상기 조건과 동일하다.</p>\n<ol>\n<li>각 model의 row속성 변경하고 save 함수로 저장 - 각 model row별로 SQL수행 - 다수 Row 작업 시 성능저하</li>\n<li>QuerySet의 update 함수에 업데이트할 속성값을 지정하여 일괄 수정 - 하나의 SQL로서 동작, 동작빠름</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">ABC</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.get(</span><span class=\"mtk19 mtki\">id</span><span class=\"mtk7\">=</span><span class=\"mtk4\">12</span><span class=\"mtk1\">) </span><span class=\"mtk3\"># id가 12인 row 객체상태로 가져옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">ABC</span><span class=\"mtk1\">.title </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> ‘빛이 당신을 태울 것 입니다.’ </span><span class=\"mtk3\"># id가 12인 row의 title을 변경함</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">ABC</span><span class=\"mtk1\">.save()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">queryset </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.object.all()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">for</span><span class=\"mtk1\"> post </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> queryset:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\tpost.destination </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> ‘붓싼’</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\tpost.save() </span><span class=\"mtk3\"># 데이터 업데이트 할 때마다 쿼리요청으로 성능저하</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">—————</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">queryset </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.object.all()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">queryset.update(</span><span class=\"mtk19 mtki\">destination</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> ‘발할라’) </span><span class=\"mtk3\"># 일괄 update 요청</span></span></span></code></pre>\n<h2>Delete</h2>\n<p>Delete도 update와 유사하다. 명령어만 바뀐 느낌이다.\n조건, 방법도 동일하므로 장점과 단점도 일치한다.</p>\n<ol>\n<li>각 model의 row속성 삭제하고 save 함수로 저장 - 각 model row별로 SQL수행 - 다수 Row 작업 시 성능저하</li>\n<li>QuerySet의 delete 함수에 업데이트할 속성값을 지정하여 일괄 수정 - 하나의 SQL로서 동작, 동작빠름</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">ABC</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.objects.get(</span><span class=\"mtk19 mtki\">id</span><span class=\"mtk7\">=</span><span class=\"mtk4\">12</span><span class=\"mtk1\">) </span><span class=\"mtk3\"># id가 12인 row 객체상태로 가져옴</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">ABC</span><span class=\"mtk1\">.delete() </span><span class=\"mtk3\"># id가 12인 row 지움</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">queryset </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.object.all()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">for</span><span class=\"mtk1\"> post </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> queryset:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\tpost.delete() </span><span class=\"mtk3\"># 데이터 삭제 할 때마다 쿼리요청으로 성능저하</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">—————</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">queryset </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">AAA</span><span class=\"mtk1\">.object.all()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">queryset.delete() </span><span class=\"mtk3\"># 일과 delete 요청</span></span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtki { font-style: italic; }\n  .abyss .mtk4 { color: #F280D0; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .mtk19 { color: #2277FF; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","categories":["Django"],"date":"May 11, 2020","description":"Django 공부 후 정리","id":"1fd40d42-457a-50c2-8653-d963d3dc912b","keywords":["Django","TIL"],"slug":"/blog/TIL/2020-05-11-Django_ORM_CRUD/","title":"Django ORM CRUD","readingTime":{"text":"4 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}