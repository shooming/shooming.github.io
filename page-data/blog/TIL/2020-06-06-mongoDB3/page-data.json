{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/TIL/2020-06-06-mongoDB3/","result":{"pageContext":{"article":{"banner":{"alt":"TIL","caption":"Photo by <u><a href=\"https://wonkooklee.github.io/thumbnail_maker/\">Thumbnail Maker</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h661V0H0v200m211-13c0%206%200%207-1%206-10-4-19%203-19%2015s9%2019%2018%2014h4l3%201h2v-44h-7v8m311-8v8c0%207%200%207-2%206-11-4-20%205-19%2018%202%2011%2010%2016%2019%2011%202-2%203-2%203%200l3%201h2v-42c1-2-5-3-6-2m-394%207c0%202%200%202%206%202h6v35h7v-35h6l5-1%201-2c0-2-2-2-15-2h-16v3m171%2017v20h7v-40h-7v20m29%200v20h24v-5h-17v-35h-7v20m-164-8c-11%209-7%2027%207%2029%2014%201%2021-20%209-29-4-4-12-4-16%200m66-2c-3%202-4%203-2%206h4c5-3%207-2%209%200%203%203%202%205-2%205-8%200-15%206-14%2012%202%207%208%2010%2015%206h4l3%201h2v-13c0-12%200-12-3-15s-10-4-16-2m134%200c-10%204-12%2022-3%2028%206%205%2020%203%2018-2%200-2-1-2-2-2-8%203-13%202-15-4l-1-3h20v-3c0-11-8-18-17-14m26%201c-4%201-5%202-3%204%201%202%202%202%205%201%205-3%208-2%2010%200%201%203%201%205-2%205-8%200-15%205-15%2011%200%208%207%2011%2015%207%203-2%204-2%204-1s1%202%203%202h2v-12c0-16-2-19-11-19l-8%202m36%201c-3%202-3%202-3%200s-1-2-3-2h-3v30h7v-10c0-11%202-15%207-15%203%200%204-1%204-5%200-2-6-1-9%202m23-1c-3%202-4%202-4%201l-2-2h-3v30h6v-11c0-12%201-13%206-14%205-2%206%201%206%2014v11h7v-10c0-11-1-17-4-19-3-3-9-2-12%200m31-1c-10%203-12%2021-4%2028%207%205%2023%203%2019-2-1-2-2-2-5-1-4%202-9%200-11-3-3-5-3-5%208-5h10v-3c0-11-8-18-17-14m-226%201l1%203%2010%2027c0%203-5%207-7%207-1-1-2%200-2%202-1%203%201%203%205%203%206-1%208-5%2014-24l7-18-3-1c-4%200-5%201-8%2016l-2%206-4-10c-4-12-4-12-8-12l-3%201m-85%204c-4%201-5%2012-3%2017%203%205%2010%205%2012-1%204-9-2-19-9-16m33%200c-6%203-6%2018%201%2020%205%202%207%200%208-10v-9c-2-1-6-2-9-1m311%200c-3%201-5%206-5%2010%200%209%206%2013%2012%208%202-2%203-15%201-17-2-1-6-2-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png","srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/41200/TIL.png 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/f979a/TIL.png 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/322ad/TIL.webp 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/de3b3/TIL.webp 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/2b2b5/TIL.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<h1>mongoDB의 Database 내용 조회하기</h1>\n<p>database에 내용을 작성했다면 그 내용을 확인해야 할 수 있어야한다.\r\nmongoDB에서는 <code>find()</code>문을 사용하여 내용을 손쉽게 조회할 수 있다.</p>\n<h2>Document 조회하기 ( db.COLLECTION_NAME.find(query. projection) )</h2>\n<p><code>find()</code>로 검색한 내용들은 기준에 해당하는 Document들을 선택해서 cursor로 반환한다.\r\ncursor 객체를 통해서 보이는 데이터를 <code>제한(limit)</code>하거나 <code>정렬(sort)</code> 할 수 있으며 10분동안 사용되지 않으면 만료된다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">파이썬으로 검색해서 나온 cursor 객체</span></span></span></code></pre>\n<p>위는 pymongo를 사용하여 파이썬에서 mongdb에 find문을 보내 해당하는 내용들을 가져온 모습이다. 보면 cursor 객체가 반환되었음을 확인 할 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">parameter</th>\n<th align=\"center\">Type</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">query</td>\n<td align=\"center\">document</td>\n<td>Optional(선택적).  다큐먼트를 조회할 때 기준을 정합니다. 기준이 없이 컬렉션에 있는 모든 다큐먼트를 조회 할때는 이 매개변수를 비우거나 비어있는 다큐먼트 { } 를 전달하세요.</td>\n</tr>\n<tr>\n<td align=\"center\">projection</td>\n<td align=\"center\">document</td>\n<td>Optional. 다큐먼트를 조회할 때 보여질 field를 정합니다.</td>\n</tr>\n</tbody>\n</table>\n<h3>db.collection_name.find()</h3>\n<p>위 명령어는 해당 collection의 document를 조회하는 명령어이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">db.나와라요.find</span><span class=\"mtk1\">() </span><span class=\"mtk3\"># db.나와라요.find({}) {}안에는 sql query를 넣지만 안넣으면 find()와 같다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">암튼 내용</span></span></span></code></pre>\n<h3>db.collecion_name.find().pretty()</h3>\n<p>위 명령어는 find를 통해 나온 검색결과를 보기 좋은 형태로 출력해준다.\r\n만약 python에서 pymongo를 사용하고 있다면 <code>pprint</code>를 사용하여 비슷한 출력결과를 얻을 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">db.나와라요.find().pretty</span><span class=\"mtk1\">() </span><span class=\"mtk3\"># pprint.pprint(질의 결과)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">암튼 내용 </span></span></span></code></pre>\n<h3>db.collection_name.({\"name\" : \"김수환무\"}).pretty</h3>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({</span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;김수환무&quot;</span><span class=\"mtk1\">}).pretty</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">대충 내용</span></span></span></code></pre>\n<h3>find문의 논리 연산자</h3>\n<p>mongodb는 비교 연산자와 논리 연산자를 통해서 원하는 내용들을 검색해올 수 있다.</p>\n<h4>비교 연산자</h4>\n<table>\n<thead>\n<tr>\n<th>operator</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$eq</td>\n<td>(equals) 주어진 값과 일치하는 값</td>\n</tr>\n<tr>\n<td>$gt</td>\n<td>(greater than) 주어진 값보다 큰 값</td>\n</tr>\n<tr>\n<td>$gte</td>\n<td>(greather than or equals) 주어진 값보다 크거나 같은 값</td>\n</tr>\n<tr>\n<td>$lt</td>\n<td>(less than) 주어진 값보다 작은 값</td>\n</tr>\n<tr>\n<td>$lte</td>\n<td>(less than or equals) 주어진 값보다 작거나 같은 값</td>\n</tr>\n<tr>\n<td>$ne</td>\n<td>(not equal) 주어진 값과 일치하지 않는 값</td>\n</tr>\n<tr>\n<td>$in</td>\n<td>주어진 배열 안에 속하는 값</td>\n</tr>\n<tr>\n<td>$nin</td>\n<td>주어빈 배열 안에 속하지 않는 값</td>\n</tr>\n</tbody>\n</table>\n<h4>논리 연산자</h4>\n<table>\n<thead>\n<tr>\n<th>operator</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$or</td>\n<td>주어진 조건중 하나라도 true 일 때 true</td>\n</tr>\n<tr>\n<td>$and</td>\n<td>주어진 모든 조건이 true 일 때 true</td>\n</tr>\n<tr>\n<td>$not</td>\n<td>주어진 조건이 false 일 때 true</td>\n</tr>\n<tr>\n<td>$nor</td>\n<td>주어진 모든 조건이 false 일때 true</td>\n</tr>\n</tbody>\n</table>\n<h3>db.collection_name.find({\"age\" : {$gt: 10, $lt:25}}).pretty()</h3>\n<p>위 내용은 age가 10초과 25미만에 해당하는 값들을 찾아오는 find문이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({</span><span class=\"mtk11\">&quot;age&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> {$gt: 10, </span><span class=\"mtk6\">$lt:25}}).pretty</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">대충 내요이 나올 예정임</span></span></span></code></pre>\n<h3>db.collection_name.find({\"name\":{$in:[\"김수한무\", \"고길동\", \"기영이\"]}})</h3>\n<p>위 내용은 <code>$in</code>배열에 포함된 Document를 조회하는 find문이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({</span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> {$in </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> [</span><span class=\"mtk11\">&quot;김수한무&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&quot;고길동&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&quot;기영이&quot;</span><span class=\"mtk1\">]}})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">대충 해당하는 내용</span></span></span></code></pre>\n<h3>db.collecion_name.find({$and:[{\"name\" : \"기영이\"}, {\"age\" : {gt : 10}}]})</h3>\n<p>위 내용은 <code>$and</code>문으로 이름이 기영이 이면서 나이가 10을 초과하는 document를 조회하는 find문이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({$and:[{</span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;기영이&quot;</span><span class=\"mtk1\">}, {</span><span class=\"mtk11\">&quot;age&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> {$gt </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> 10}}]})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({</span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\">:</span><span class=\"mtk11\">&quot;기영이&quot;</span><span class=\"mtk1\">}, {</span><span class=\"mtk11\">&quot;age&quot;</span><span class=\"mtk1\">:{$gt </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> 10}}) </span><span class=\"mtk3\"># 위와 같은 내용이지만 이렇게도 사용할 수 있다.</span></span></span></code></pre>\n<h3>db.collection_name.find({$or : [{\"name\" : \"고길동\"}, {\"age\" : \"20\"}]})</h3>\n<p>위 내용은 <code>$or</code>문으로 이름이 고길동 이거나 나이가 20인 document를 찾아오는 find문이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({$or </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> [{</span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;고길동&quot;</span><span class=\"mtk1\">}, {</span><span class=\"mtk11\">&quot;age&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;20&quot;</span><span class=\"mtk1\">}]})</span></span></span></code></pre>\n<h3>정규표현식을 사용한 find</h3>\n<p><code>$regex</code> 연산자를 사용하면 정규표현식을 동하여 Document의 내용을 찾아오는 것이 가능하다.\r\n정규식만 사용한다면 따로 <code>$regex</code>를 사용하지 않아도 된다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{ </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">field</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\">: { $regex: /pattern/, $options: </span><span class=\"mtk11\">&#39;&lt;options&gt;&#39;</span><span class=\"mtk1\"> } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{ </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">field</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\">: { $regex: </span><span class=\"mtk11\">&#39;pattern&#39;</span><span class=\"mtk1\">, $options: </span><span class=\"mtk11\">&#39;&lt;options&gt;&#39;</span><span class=\"mtk1\"> } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{ </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">field</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\">: { $regex: /pattern/</span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">options</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\"> } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{ </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">field</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\">: /pattern/</span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">options</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\"> }</span></span></span></code></pre>\n<p>그리고 사용할수 있는 옵션은 몇 가지가 있다. 옵션의 내용은 아래와 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">option</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">i</td>\n<td>대소문자 무시</td>\n</tr>\n<tr>\n<td align=\"center\">m</td>\n<td>정규식에서 anchor(^) 를 사용 할 때 값에 \\n 이 있다면 무력화</td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td>정규식 안에있는 whitespace를 모두 무시</td>\n</tr>\n<tr>\n<td align=\"center\">s</td>\n<td>dot (.) 사용 할 떄 \\n 을 포함해서 매치</td>\n</tr>\n</tbody>\n</table>\n<h4>db.collecion_name.find({\"name\" : /^김/})</h4>\n<p>위 내용은 name에 성이 김으로 시작하는 사람들만 find해서 가지고오는 find문이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({</span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> /^김/})</span></span></span></code></pre>\n<h3>where 연산자를 사용한 find</h3>\n<p><code>$where</code>연산자를 사용하면 javascript expression(표현식)을 사용할 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({ $where </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;this.name.length === 4&quot;</span><span class=\"mtk1\"> }) </span><span class=\"mtk3\"># 이름의 길이가 4글자인 document 검색</span></span></span></code></pre>\n<h3>내부 객체 find</h3>\n<p>내부에 객체를 검색하는 방법에는 몇 가지가 존재한다.</p>\n<ol>\n<li><code>$elemMatch</code>연산자로 Embedded Document배열을 하용할 때 사용한다. Embedded Documents는 document의 key에 대한 값이 document가 되는 것이다.</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find( { </span><span class=\"mtk11\">&quot;school&quot;</span><span class=\"mtk1\">: { $elemMatch: { </span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&quot;알파 초등학교&quot;</span><span class=\"mtk1\"> } } } ) </span><span class=\"mtk3\"># School중에 name의 내용이 알파 초등학교인 document를 조회한다.</span></span></span></code></pre>\n<ol start=\"2\">\n<li>Embedded Document 배열이 아니라 Document의 \"name\" 처럼 한개의 Embedded Document일 경우</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">&quot;username&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;show&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> {</span><span class=\"mtk11\">&quot;first&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;megi&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;last&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;oh&quot;</span><span class=\"mtk1\">},</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">&quot;language&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> [</span><span class=\"mtk11\">&quot;korean&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&quot;english&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&quot;chinese&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>위의 document와 같이 Embedded Document가 배열이 아니라 한개 인경우와 document가 아니라 arry 형태가 두가지가 있다.</p>\n<p>한개의 document 조회할때</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.users.find({ </span><span class=\"mtk11\">&quot;name.first&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&quot;megi&quot;</span><span class=\"mtk1\">}) </span><span class=\"mtk3\"># name의 값의 docment의 first가 megi인 것을 find</span></span></span></code></pre>\n<p>document의 arry 조회할때</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.users.find({ </span><span class=\"mtk11\">&quot;language&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&quot;korean&quot;</span><span class=\"mtk1\">}) </span><span class=\"mtk3\"># 키가 language이면서 korean을 값으로 가지는 것 find</span></span></span></code></pre>\n<h3>projection</h3>\n<p>해당 projection은 find() 메소드의 parameter로 qurey의 결과값에서 보여질 field를 결정한다.</p>\n<h4>db.collecion_name.find({}, {\"_id\" : true, \"name\" : true})</h4>\n<p>위 내용은 전체 document를 가져오며 _id와 name만 가지고 오겠다는 내용이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({}, {</span><span class=\"mtk11\">&quot;_id&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> true, </span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> true})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find({}, {</span><span class=\"mtk11\">&quot;_id&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> 1, </span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> 1}) </span><span class=\"mtk3\"># 1만 적게되면 true와 같이 작동한다.</span></span></span></code></pre>\n<h4>$slice 연산자</h4>\n<p>Embedded Document 내용을 읽을때 limit을 설정하기위 한 연산자이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find( {</span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;김수한무&quot;</span><span class=\"mtk1\">}, {</span><span class=\"mtk11\">&quot;school&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\">  {$slice </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> 1}}) </span><span class=\"mtk3\"># 김수한무의 school은 한개만 나오게 한다.</span></span></span></code></pre>\n<h4>$elemMatch 연산자</h4>\n<p>Embedded Document이 존재하는 경우 해당하는 document의 원하는 내용들만 출력하게 해줄 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.find( { </span><span class=\"mtk11\">&quot;school&quot;</span><span class=\"mtk1\">: { $elemMatch: { </span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&quot;알파 초등학교&quot;</span><span class=\"mtk1\"> } } },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 { </span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> true,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                   </span><span class=\"mtk11\">&quot;school&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> { </span><span class=\"mtk11\">&quot;name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;알파 초등학교&quot;</span><span class=\"mtk1\"> },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                   </span><span class=\"mtk11\">&quot;school.name&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> true,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                   </span><span class=\"mtk11\">&quot;school.location&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> </span><span class=\"mtk15\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<h3>findOne 조회</h3>\n<p>해당 명령어는 단 find로 조회한 내용 중 하나만 찾고 싶을때 사용한다. find()[0]으로 가장 첫번째것을 출력해 준다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">db.나와라요.findOne({ </span><span class=\"mtk11\">&quot;age&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> 10}) </span><span class=\"mtk3\"># age가 10인 내용들 중 가능 첫번째 값을 출력함.</span></span></span></code></pre>\n<blockquote>\n<p>참조블로그</br><a href=\"https://velopert.com/\">veloper</a></br><a href=\"https://www.zerocho.com/\">zerocho</a></p>\n</blockquote>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk6 { color: #DDBB88; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .mtk11 { color: #22AA44; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","categories":["Mongo DB"],"date":"June 06, 2020","description":"Mongo DB TIL 배운거 정리","id":"29999eab-31fb-5d72-8199-e31e962fe265","keywords":["Mongo DB","TIL"],"slug":"/blog/TIL/2020-06-06-mongoDB3/","title":"Mongo DB 3 TIL","readingTime":{"text":"10 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}