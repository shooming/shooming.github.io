{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/TIL/2020-04-02-liunux-TIL/","result":{"pageContext":{"article":{"banner":{"alt":"TIL","caption":"Photo by <u><a href=\"https://wonkooklee.github.io/thumbnail_maker/\">Thumbnail Maker</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h661V0H0v200m211-13c0%206%200%207-1%206-10-4-19%203-19%2015s9%2019%2018%2014h4l3%201h2v-44h-7v8m311-8v8c0%207%200%207-2%206-11-4-20%205-19%2018%202%2011%2010%2016%2019%2011%202-2%203-2%203%200l3%201h2v-42c1-2-5-3-6-2m-394%207c0%202%200%202%206%202h6v35h7v-35h6l5-1%201-2c0-2-2-2-15-2h-16v3m171%2017v20h7v-40h-7v20m29%200v20h24v-5h-17v-35h-7v20m-164-8c-11%209-7%2027%207%2029%2014%201%2021-20%209-29-4-4-12-4-16%200m66-2c-3%202-4%203-2%206h4c5-3%207-2%209%200%203%203%202%205-2%205-8%200-15%206-14%2012%202%207%208%2010%2015%206h4l3%201h2v-13c0-12%200-12-3-15s-10-4-16-2m134%200c-10%204-12%2022-3%2028%206%205%2020%203%2018-2%200-2-1-2-2-2-8%203-13%202-15-4l-1-3h20v-3c0-11-8-18-17-14m26%201c-4%201-5%202-3%204%201%202%202%202%205%201%205-3%208-2%2010%200%201%203%201%205-2%205-8%200-15%205-15%2011%200%208%207%2011%2015%207%203-2%204-2%204-1s1%202%203%202h2v-12c0-16-2-19-11-19l-8%202m36%201c-3%202-3%202-3%200s-1-2-3-2h-3v30h7v-10c0-11%202-15%207-15%203%200%204-1%204-5%200-2-6-1-9%202m23-1c-3%202-4%202-4%201l-2-2h-3v30h6v-11c0-12%201-13%206-14%205-2%206%201%206%2014v11h7v-10c0-11-1-17-4-19-3-3-9-2-12%200m31-1c-10%203-12%2021-4%2028%207%205%2023%203%2019-2-1-2-2-2-5-1-4%202-9%200-11-3-3-5-3-5%208-5h10v-3c0-11-8-18-17-14m-226%201l1%203%2010%2027c0%203-5%207-7%207-1-1-2%200-2%202-1%203%201%203%205%203%206-1%208-5%2014-24l7-18-3-1c-4%200-5%201-8%2016l-2%206-4-10c-4-12-4-12-8-12l-3%201m-85%204c-4%201-5%2012-3%2017%203%205%2010%205%2012-1%204-9-2-19-9-16m33%200c-6%203-6%2018%201%2020%205%202%207%200%208-10v-9c-2-1-6-2-9-1m311%200c-3%201-5%206-5%2010%200%209%206%2013%2012%208%202-2%203-15%201-17-2-1-6-2-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png","srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/41200/TIL.png 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/f979a/TIL.png 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/322ad/TIL.webp 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/de3b3/TIL.webp 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/2b2b5/TIL.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<h1>LINUX TIL</h1>\n<h2>리눅스 기초</h2>\n<p>linus torvals가 개발</p>\n<p>초기 기능</p>\n<ul>\n<li>프로세스 스케줄링</li>\n<li>가상메모리 및 파일관리</li>\n<li>장치 입출력을 제공하는 기본적인 커널</li>\n</ul>\n<p>gnu 공개 라이센스로 변환 후 발전 됨</p>\n<p>unix와 완벽히 호환됨\r\n무료로 사용됨\r\ngui제공\r\n서버용으로 사용</p>\n<p>하드웨어 &#x3C; 커널 &#x3C; 쉘 &#x3C; 응용프로그램</p>\n<p>커널 : 리눅스의 핵심, 프로세스 관리, 메모리 관리, 파일 및 장치 등 컴퓨터와 하드웨어를 모두 제어하는 영역</p>\n<p>쉘 : 커널과 사용자간의 접점, 쉘을 통해 컴퓨터 원하는 동작 실행가능, 대표적 셀은 BASH(Bourne-agein Shell)있으며 요즘은 zsh(Z shell)이 만이 쓰인다.</p>\n<p>응용프로그램 : 각종 프로그램 시스템을 위한 프로그램, 사용자의 문서 편집 도구, 브라우저, 네트워크 도구 등</p>\n<hr>\n<h2>linux shell</h2>\n<p>터미널 환경에서 운영체제의 커널(kernel)과 사용자의 유저 스페이스(user spacee)를 이어주는 인터페이스(interface)역할을 하는 프로그램이다.</p>\n<p>Terminal과 Shell은 다름</p>\n<p>Terminal은 Shell을 실행시키는 프로그램임</p>\n<p>package는 프로그램을 뜨하며 다른 사람들이 개발하고 대중에게 공유한 프로그램을 package라고 함.</p>\n<p>package manager는 os별로 다름\r\nMac - homebrew\r\nubuntu - apt / apt-get apt가 좀 더 발전된 것이며 구버전은 apt-get만 사용해야하지만 최신 버전은 둘다 사용가능</p>\n<p>cd - directory change 디렉토리 위치\r\ncd / - root 위치로 감\r\ncd ~ - home 위치로 감\r\npwd - 현재위치\r\nls - list dicrectory 디렉토리 내의 파일,폴더 나옴</p>\n<p>ls -a - 숨겨진 파일까지 다나옴\r\nls -la  - 숨겨진 파일과 상세 내용 다나옴</p>\n<p>env - 환경변수 보여줌\r\nwhich - 어디에 있는지 알려줌 폴더, 파일 위치</p>\n<p>환경 변수란 shell의 어떠한 설정 값을 가지고 있는 변수를 뜻한다. 그리고 이러한 환경 변수들은 shell이 돌아가는 동안 계속 존재하며 사용됨</p>\n<p>환경변수 설정 : 변경변수는 기본적인 명령어가 들어가있음, 구분자는 콜론(:)을 사용함, shellconfig파일에 지정하여 관리할 수 있음</p>\n<p>echo $PATH - PATH의 환경변수 출력</p>\n<p>mkdir - 디렉토리 생성</p>\n<p>vi .bashrc - bash설정파일</p>\n<p>export PATH=\"/home/eun/bin/anaconda3/bin:$PATH\" - 환경변수 설정해줌 설정하면 맨마지막에 추가된건 제일 앞에 나온다.</p>\n<p>source .bashrc로 bash 설정변경 다시 불러옴</p>\n<p>mv (폴더/파일명) (폴더/파일명) - mv는 파일 옮기거나 파일이름 바꿈 앞이 기존 뒤가 바뀔것</p>\n<p>cp (-r) (폴더/파일명) (폴더/파일명) - 파일복사 할때 사용하고 폴더 복제할때는 -r옵션줌</p>\n<p>cat - 파일내용 출력해서 보는 명령어</p>\n<p>rmdir - 폴더 삭제하는 명령어</p>\n<p>clear - 터미널상 명령어 지우고 다시 보여줌</p>\n<p>piping은 이전 커맨드의 결과물을 이후에 연결된 작업으로 추가동작을 하고 싶을 때 사용</p>\n<p>ls | step m - m이 들어있는 디렉토리, 폴더 찾아옴</p>\n<p>man 원하는 명령어 - 멸령어 설명 페이지 열림</p>\n<p>tldr ls - ls에대한 핵심적인 내용만 보여줌</p>\n<p>tldr은 패키지를 설치해야한다.</p>\n<hr>\n<h2>vim,git 설치</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo apt-get install vim git</span></span></span></code></pre>\n<h2>zsh설치</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo apt-get install zsh</span></span></span></code></pre>\n<p>zsh 설치</p>\n<h2>oh-my-zsh</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo apt-get install curl</span></span></span></code></pre>\n<p>oh-my-zsh을 설치하기 위해 curl 필요 하므로 설치</p>\n<p>oh-my-zsh github(<a href=\"https://github.com/ohmyzsh/ohmyzsh)%EC%97%90\">https://github.com/ohmyzsh/ohmyzsh)에</a> 접속해 명령어 확인하여 curl로 설치</p>\n<h3>폰트설치</h3>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo apt-get install fonts-powerline</span></span></span></code></pre>\n<p>powerline써야 글자 안깨짐</p>\n<h2>zsh-autosuggestions</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">cd</span><span class=\"mtk1\"> </span><span class=\"mtk7\">~</span><span class=\"mtk1\">/oh-my-zsh/plugins</span></span></span></code></pre>\n<p>플러그인 디렉토리로 이동해서\r\n해당 github로 이동해서</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git clone </span><span class=\"mtk11\">&quot;github주소&quot;</span></span></span></code></pre>\n<p>해서 설치</p>\n<h2>zsh-syntax-highlighting</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">cd</span><span class=\"mtk1\"> </span><span class=\"mtk7\">~</span><span class=\"mtk1\">/oh-my-zsh/plugins</span></span></span></code></pre>\n<p>플러그인 디렉토리로 이동해서\r\n해당 github로 이동해서</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git clone </span><span class=\"mtk11\">&quot;github주소&quot;</span></span></span></code></pre>\n<p>해서 설치</p>\n<h2>zsh설정</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">vi </span><span class=\"mtk7\">~</span><span class=\"mtk1\">/.zshrc</span></span></span></code></pre>\n<p>home의 .zshrc에서 설정</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">ZSH_THEME=</span><span class=\"mtk11\">&quot;agnoster&quot;</span></span></span></code></pre>\n<p>해당 구문에서 테마 변경</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</span></span></span></code></pre>\n<p>중간에 plugins란에 플러스인 이름 작성</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">source</span><span class=\"mtk1\"> </span><span class=\"mtk7\">~</span><span class=\"mtk1\">/.oh-my-zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">source</span><span class=\"mtk1\"> </span><span class=\"mtk7\">~</span><span class=\"mtk1\">/.oh-my-zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span></span></span></code></pre>\n<p>맨 밑에 source로 플러그인 클론받은 위치에 스크립트 지정해주고 저장함</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">source</span><span class=\"mtk1\"> </span><span class=\"mtk7\">~</span><span class=\"mtk1\">/.zshrc</span></span></span></code></pre>\n<p>zsh 설정 다시 받으면 적용됨</p>\n<hr>\n<h2>가상환경 설치(miniconda 3)</h2>\n<ol>\n<li>wget의 설치 유무</li>\n</ol>\n<p>ubuntu는 wget을 통해 웹에서 파일을 다운받을 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">apt install wget</span></span></span></code></pre>\n<p>위 명령어로 wget을 다운받는다.\r\nmac은 apt가 아니라 brew를 사용한다.</p>\n<ol start=\"2\">\n<li>miniconda3 설치파일 다운</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span></span></span></code></pre>\n<p>`20.3.31. 기준 miniconda3의 최신버전으로 다운 받는 명령어다 버전은 계속 달라질 예정이므로 아래 주소로 들어가 본인에게 필요한 버전의 주소를 찾아서 다운 받으면된다.\r\n<a href=\"https://docs.conda.io/en/latest/miniconda.html\">https://docs.conda.io/en/latest/miniconda.html</a></p>\n<p>3.miniconda3 설치파운 권한 변경\r\n터미널에서 별도로 디렉토리를 옮기지않았다면 파일은 <code>/home/&#x3C;유저네임></code>위치에 다운받아져 있을 것이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">chmod -x Miniconda3-latest-Linux-x86_64.sh</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">chmod -R 755 Miniconda3-latest-Linux-x86_64.sh</span></span></span></code></pre>\n<p>위의 2개중 하나의 명령어를 사용하여 설치파일의 실행할 수 있도록 권한을 바꾸어준다.</p>\n<ol start=\"4\">\n<li>miniconda3 설치</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">./Miniconda3-latest-Linux-x86_64.sh</span></span></span></code></pre>\n<p>명령어를 치면 파일이 실행되며, 약관이 나온다. 약관동의 yes를 한 후\r\n마지막에 shell에 환경변수등을 지정하고 기타 설정을통해 바로 사용할 수 있게할지 물어본다. yes를 하고 터미널을 재시작하면 적용되어 있다.\r\n정상적으로 설치되면 터미널 앞에 (base)라고 표시가된다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(base) </span><span class=\"mtk7\">***</span><span class=\"mtk1\">@</span><span class=\"mtk7\">***</span><span class=\"mtk1\">:</span><span class=\"mtk7\">~</span><span class=\"mtk1\">$</span></span></span></code></pre>\n<p>설치시 sudo로 설치하면 conda사용시 권한문제가 생기므로 sudo 설치하지 말 것</p>\n<ol start=\"5\">\n<li>가상환경 만들기</li>\n</ol>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conda env list</span></span></span></code></pre>\n<p>conda 명령어를 쳐서 가상환경이 몇개가 존재하는지 확인할 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conda create -n </span><span class=\"mtk11\">&quot;가상환경이름&quot;</span><span class=\"mtk1\"> python=3.8</span></span></span></code></pre>\n<p>create명령어를 사용하여 만들수 있으며 \"(따옴표)는 작성하지 않고 환경의 이름만 정해준다 마지막에 python버전을 정할 수 있는데 미입력시 defualt버전이 설치된다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conda activate </span><span class=\"mtk11\">&quot;가상환경이름&quot;</span></span></span></code></pre>\n<p>가상환경을 만들었으니 작동시켜보도록하자 이때는 activate를 사용한다.\r\n명령어를 사용하면 터미널 앞에 (base)가 (가상환경이름)으로 바뀌게 된다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">pip freeze</span></span></span></code></pre>\n<p>명령어를 보면 현재 가상환경에 설치되어있는 패키지들의 목록을 확인할 수 있다. 만약 첫 설치라면 <code>certifi==2019.11.28</code>와 같이 <code>certifi==</code> 한줄만 나와야한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conda deactivate</span></span></span></code></pre>\n<p>deactivate를 하면 가상환경을 종료 할 수 있다.</p>\n<h2>가상환경 기타 명령어들</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conda env remove -n </span><span class=\"mtk11\">&quot;가상환경이름&quot;</span></span></span></code></pre>\n<p>가상환경을 삭제한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conda env export</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;가상환경이름.yaml&quot;</span></span></span></code></pre>\n<p>가상환경 익스포트하기(배포용 yaml만들기)</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conda env export</span><span class=\"mtk7\">&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;가상환경이름.yaml&quot;</span></span></span></code></pre>\n<p>익스포트한 가상환경 임포트하기</p>\n<h2>bash 사용중 zsh로 변경시</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">conda init zsh</span></span></span></code></pre>\n<p>zsh로 변경하게되면 miniconda에서 해당 실행중인 shell initialize 해달라고함 주문대로 bash fish zsh powershell 등 본인이 사용하는 shell 쓰면됨 init 뒤에</p>\n<hr>\n<h2>가상환경에 Django 설치하기</h2>\n<p>Django를 설치하기전에 가상환경이 실행되어 있어야함을 확인해야한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">python -m pip install Django</span></span></span></code></pre>\n<p>pip를 이용하여 Django를 설치해준다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;</span><span class=\"mtk1\"> pip freeze</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">asgiref==3.2.7</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">certifi==2019.11.28</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Django==3.0.4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">pytz==2019.3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sqlparse==0.3.1</span></span></span></code></pre>\n<p>pip freeze 설치시 Django가 있고 총 4개의 파일이 설치되었다면 제대로 설치가 된것이다.</p>\n<hr>\n<h2>Django활용해보기</h2>\n<h2>Django</h2>\n<p>초기설정</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">django-admin startproject mysite</span></span></span></code></pre>\n<p>django로 프로젝트를 시작하려면 프로젝트 저장할 디렉토리로 이동한후 위의 명령어를 작성한다.</p>\n<p>명령어를 작성하면 해당 위치에서 django가 기본설정을 시작한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">python manage.py runserver</span></span></span></code></pre>\n<p>그 후 runserver를 하면 서버가 작동하게된다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .mtk11 { color: #22AA44; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","categories":["Linux"],"date":"April 02, 2020","description":"Linux TIL 배운거 정리","id":"f431838d-2133-5ad1-83df-2c6836bc7d59","keywords":["Linux","TIL"],"slug":"/blog/TIL/2020-04-02-liunux-TIL/","title":"Linux TIL","readingTime":{"text":"11 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}