{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/TIL/2020-04-14-bcrypt/","result":{"pageContext":{"article":{"banner":{"alt":"TIL","caption":"Photo by <u><a href=\"https://wonkooklee.github.io/thumbnail_maker/\">Thumbnail Maker</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h661V0H0v200m211-13c0%206%200%207-1%206-10-4-19%203-19%2015s9%2019%2018%2014h4l3%201h2v-44h-7v8m311-8v8c0%207%200%207-2%206-11-4-20%205-19%2018%202%2011%2010%2016%2019%2011%202-2%203-2%203%200l3%201h2v-42c1-2-5-3-6-2m-394%207c0%202%200%202%206%202h6v35h7v-35h6l5-1%201-2c0-2-2-2-15-2h-16v3m171%2017v20h7v-40h-7v20m29%200v20h24v-5h-17v-35h-7v20m-164-8c-11%209-7%2027%207%2029%2014%201%2021-20%209-29-4-4-12-4-16%200m66-2c-3%202-4%203-2%206h4c5-3%207-2%209%200%203%203%202%205-2%205-8%200-15%206-14%2012%202%207%208%2010%2015%206h4l3%201h2v-13c0-12%200-12-3-15s-10-4-16-2m134%200c-10%204-12%2022-3%2028%206%205%2020%203%2018-2%200-2-1-2-2-2-8%203-13%202-15-4l-1-3h20v-3c0-11-8-18-17-14m26%201c-4%201-5%202-3%204%201%202%202%202%205%201%205-3%208-2%2010%200%201%203%201%205-2%205-8%200-15%205-15%2011%200%208%207%2011%2015%207%203-2%204-2%204-1s1%202%203%202h2v-12c0-16-2-19-11-19l-8%202m36%201c-3%202-3%202-3%200s-1-2-3-2h-3v30h7v-10c0-11%202-15%207-15%203%200%204-1%204-5%200-2-6-1-9%202m23-1c-3%202-4%202-4%201l-2-2h-3v30h6v-11c0-12%201-13%206-14%205-2%206%201%206%2014v11h7v-10c0-11-1-17-4-19-3-3-9-2-12%200m31-1c-10%203-12%2021-4%2028%207%205%2023%203%2019-2-1-2-2-2-5-1-4%202-9%200-11-3-3-5-3-5%208-5h10v-3c0-11-8-18-17-14m-226%201l1%203%2010%2027c0%203-5%207-7%207-1-1-2%200-2%202-1%203%201%203%205%203%206-1%208-5%2014-24l7-18-3-1c-4%200-5%201-8%2016l-2%206-4-10c-4-12-4-12-8-12l-3%201m-85%204c-4%201-5%2012-3%2017%203%205%2010%205%2012-1%204-9-2-19-9-16m33%200c-6%203-6%2018%201%2020%205%202%207%200%208-10v-9c-2-1-6-2-9-1m311%200c-3%201-5%206-5%2010%200%209%206%2013%2012%208%202-2%203-15%201-17-2-1-6-2-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png","srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/41200/TIL.png 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/f979a/TIL.png 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/322ad/TIL.webp 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/de3b3/TIL.webp 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/2b2b5/TIL.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<h1>bcrypt</h1>\n<h2>bcrypt란</h2>\n<p>비밀번호를 암호화하기 위한 라이브러리의 하나로서 비밀번호를 hash하고 임의적인 문자열을 hash된 암호에 붙이고 다시 해쉬하는 과정을 여러번하여 비밀번호를 찾기 어렵게 한다.</p>\n<h2>bcrypt로 암호화 하기</h2>\n<p>bcrypt는 <code>str</code>형 데이터가 아닌 <code>Bytes</code>데이터를 암호화 하기 때문에 암호화 하기 위해서 bytes화 해야한다.</p>\n<p>파이썬에서는 <code>str</code>을 encode하면 bytes(이진화)되고, <code>Bytes</code>를 decode하면 <code>str</code>화 한다.</p>\n<p>encode, decode할때는 사람이 인식할 수 있게 'UTF-8' 유니코드 문자 규격을 사용한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">password </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;1234&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">hashed_password </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> bcrypt.hashpw(password.encode(</span><span class=\"mtk11\">&#39;utf-8&#39;</span><span class=\"mtk1\">), bcrypt.gensalt())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">print</span><span class=\"mtk1\">(hashed_password)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># b&#39;$2b$12$YFs9rh.1LgJwZuf9ibyjpuLvBoCaGX0MzedFWF2Jo0zU3lMZurZ4a&#39;</span></span></span></code></pre>\n<p>위의 코드는 bcrypt를 사용하여 비밀번호를 암호화 한것이다.</p>\n<p>2번째 줄이 암호화를 하는 부분인데 <code>bcrypt.hashpw</code>는 해쉬를 하기위해 bcrypt를 불러온다.\n이제 인자 전달부분을 보면<code>password.encode('utf-8')</code>비밀번호를 utf-8형태로 인코딩하는 것을 볼 수 있다.</p>\n<p>앞에서 설명했는데 bcrypt는 bytes형태만을 이해 하므로 인코딩을 해주어야한다. 하지만 우리가 알아 볼수있어야하므로 utf-8의 형태를 취한 것이다.</p>\n<p><code>bcrypt.gensalt()</code>는 무작위 문자열을 생성하여 해쉬된 암호에 붙이고 다시 해쉬할 수 있게해준다.</p>\n<p>마지막 줄을 보면 b가 붙은 문자열이 있다. 저부분이 암호화한 내용이 저러한 형태로 나오는 것이며, bytes형태이기 때문에 b가 붙어 있는 것이다. decode를 하면 앞에 b가 떨어진 모습을 볼 수 있다.</p>\n<p>만약 회원가입이었다면 우리가 저 비밀번호를 저장해야 할것이다. 하지만 그대로 저장하면 bytes의 형태로 그대로 저장되게 된다. 그렇기 때문에 다시 우리가 알아 볼 수 있도록 decode해서 저장한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user_email  </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;email&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user_name   </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;name&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">user_id     </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> data[</span><span class=\"mtk11\">&#39;id&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">password    </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> hashed_pass.decode(</span><span class=\"mtk11\">&#39;utf-8&#39;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>이런 식으로 저장하면된다.</p>\n<h2>암호화 해제</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">new_password </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;1234&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bcrypt.checkpw(new_password.encode(</span><span class=\"mtk11\">&#39;utf-8&#39;</span><span class=\"mtk1\">),hashed_password)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">True</span></span></span></code></pre>\n<p>위의 코드는 아까와는 반대로 암호화를 해제하고 입력받은 비밀번호가 맞는지 확인하는 절차이다.</p>\n<p>2번째 코드를 보자 <code>bcrypt.checkpw</code> 아까와는 다르게 들어온 값이 맞는 지를 확인하려는 것이기 때문에 check임을 알수있다.</p>\n<p><code>new_password.encode('utf-8')</code> 첫번째 인자는 입력받은 패스워드를 넣는 것이며 encode를 시켜주어야한다.</p>\n<p><code>hashed_password</code> 두번째는 암호화된 패스워드이다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .mtk11 { color: #22AA44; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .mtk4 { color: #F280D0; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","categories":["인증/인가"],"date":"April 14, 2020","description":"인증/인가 TIL 배운거 정리","id":"1742e9a8-0b43-5a94-8357-4204c0a5c370","keywords":["bcrypt","인증/인가","TIL"],"slug":"/blog/TIL/2020-04-14-bcrypt/","title":"bcrypt TIL","readingTime":{"text":"4 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}