{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/TIL/2020-05-13-Data-Structure[4Tree]/","result":{"pageContext":{"article":{"banner":{"alt":"TIL","caption":"Photo by <u><a href=\"https://wonkooklee.github.io/thumbnail_maker/\">Thumbnail Maker</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h661V0H0v200m211-13c0%206%200%207-1%206-10-4-19%203-19%2015s9%2019%2018%2014h4l3%201h2v-44h-7v8m311-8v8c0%207%200%207-2%206-11-4-20%205-19%2018%202%2011%2010%2016%2019%2011%202-2%203-2%203%200l3%201h2v-42c1-2-5-3-6-2m-394%207c0%202%200%202%206%202h6v35h7v-35h6l5-1%201-2c0-2-2-2-15-2h-16v3m171%2017v20h7v-40h-7v20m29%200v20h24v-5h-17v-35h-7v20m-164-8c-11%209-7%2027%207%2029%2014%201%2021-20%209-29-4-4-12-4-16%200m66-2c-3%202-4%203-2%206h4c5-3%207-2%209%200%203%203%202%205-2%205-8%200-15%206-14%2012%202%207%208%2010%2015%206h4l3%201h2v-13c0-12%200-12-3-15s-10-4-16-2m134%200c-10%204-12%2022-3%2028%206%205%2020%203%2018-2%200-2-1-2-2-2-8%203-13%202-15-4l-1-3h20v-3c0-11-8-18-17-14m26%201c-4%201-5%202-3%204%201%202%202%202%205%201%205-3%208-2%2010%200%201%203%201%205-2%205-8%200-15%205-15%2011%200%208%207%2011%2015%207%203-2%204-2%204-1s1%202%203%202h2v-12c0-16-2-19-11-19l-8%202m36%201c-3%202-3%202-3%200s-1-2-3-2h-3v30h7v-10c0-11%202-15%207-15%203%200%204-1%204-5%200-2-6-1-9%202m23-1c-3%202-4%202-4%201l-2-2h-3v30h6v-11c0-12%201-13%206-14%205-2%206%201%206%2014v11h7v-10c0-11-1-17-4-19-3-3-9-2-12%200m31-1c-10%203-12%2021-4%2028%207%205%2023%203%2019-2-1-2-2-2-5-1-4%202-9%200-11-3-3-5-3-5%208-5h10v-3c0-11-8-18-17-14m-226%201l1%203%2010%2027c0%203-5%207-7%207-1-1-2%200-2%202-1%203%201%203%205%203%206-1%208-5%2014-24l7-18-3-1c-4%200-5%201-8%2016l-2%206-4-10c-4-12-4-12-8-12l-3%201m-85%204c-4%201-5%2012-3%2017%203%205%2010%205%2012-1%204-9-2-19-9-16m33%200c-6%203-6%2018%201%2020%205%202%207%200%208-10v-9c-2-1-6-2-9-1m311%200c-3%201-5%206-5%2010%200%209%206%2013%2012%208%202-2%203-15%201-17-2-1-6-2-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png","srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/41200/TIL.png 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/f979a/TIL.png 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/322ad/TIL.webp 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/de3b3/TIL.webp 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/2b2b5/TIL.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<h1>Tree</h1>\n<p>Tree 자료구조는 거꾸로된 나무 형태로 저장하는 자료 구조입니다.\nTree는 여러유형이 있지만 기본은 binary tree(이진 트리) 자료구조로 이진 트리는 두개의 자직노드를 가지는 형태의 트리이다.</p>\n<p>트리는 일반적으로 대상정보의 각 항목들을 계층적으로 연관되도록 구조화 시키고자 할때 사용하는 비선형 자료구조이다.</p>\n<p>부-모자식 관계의 계층적 구조로 표현된다.</p>\n<p>계층적인 관계 표현에 쓰이고, 윈도우와 리눅스의 파일시스템 구조도 트리로 표현됩니다. 대용량의 데이터를 저장 할때도 쓰임.</p>\n<p>Tree 구조는 데이터 저장보다는 저장된 데이터를 효과적으로 탐색하기 위해 사용된다.</p>\n<p>이진 트리는 최대 2개의 자식노드를 가지며 left node, right node라고 한다. 부모node보다 값이 작으면 left node가 되며, 부모node보다 값이 같거나 큰값은 right node에 저장한다.</p>\n<h2>트리의 형태</h2>\n<p>Node : 트리 구조의 교점으로 node가 데이터를 가지고 있고 또한 자식 노드를 가지고 있으며 트리자료구조는 노드를 기본으로 구성된다.</p>\n<p>Root Node : 트리 구조의 가장 위 노드로 시작점이 되는 노드 입니다.</p>\n<p>Edge : 트리를 구성하기 위해 노드와 노드를 연결하는 선</p>\n<p>level : 트리의 깊이를 가지는 노드의 집합</p>\n<p>degree : 하위 트리개수 / 각 노드가 지닌 가지의 수</p>\n<p>Internal Node : Leaf노드를 제외한 중간에 윛치한 노드들을 말한다.</p>\n<p>Leaf Node : 하위에 다른 노드가 연결되어 있지 않은 노드입니다.</p>\n<p>루트 노드를 제외한 모든 노드는 단 하나의 부모노드만을 가진다.</p>\n<h2>트리의 탐색</h2>\n<ol>\n<li>\n<p>전위순회(preorder)\n루트노드 - 왼쪽 서브트리 - 오른쪽 서브트리 순으로 순회하는 방식\n'깊이 우선 순회'라고도 함</p>\n</li>\n<li>\n<p>중위순회(inorder)\n루트노드에서 시작해서 왼쪽 서브트리 - 노드 - 오른쪽 - 서브트리 순으로 순회하는 방식\n'대칭 순회'라고도 함</p>\n</li>\n<li>\n<p>후위 순회(postorder)\n루트노드에서 시작해 왼쪽 서브트리 - 오른쪽 서브트리 - 노드 순으로 순회 하는 방식이다.</p>\n</li>\n</ol>\n<h2>이진 트리와 이진 탐색 트리</h2>\n<p><img src=\"./img/datastructure/%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC.png\" alt=\"편향이진트리\"></p>\n<ol>\n<li>편향 이진 트리(skewed binary tree)\n편향이진 트리는 하나의 차수로만 이뤄져 있는 경우를 말합니다. 이런 구조는 배열과 같은 선형구조이므로 Leaf Node 탐색시 결국 모두 읽어 들여야하는 단점이 있어 효율이 떨어지며, 단점을 보완하기위해 '높이 균형 트리'라는 것이 있다.</li>\n</ol>\n<p><img src=\"./img/datastructure/%ED%8F%AC%ED%99%94%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC.png\" alt=\"포화이진트리\">\n2. 포화 이진 트리(Full Binary Tree)\nLeaf Node를 제외한 모든 노드의 차수가 두개로 이뤄진 경우로 이경우 해당 차수에 몇개의 노드가 존재하는지 바로 알 수 있어 개수 파악에 용이</p>\n<ol start=\"3\">\n<li>완전 이진 트리(Complete Binary Tree)\n포화 이진트리와 같은 개념으로 생성하지만 모든 노드가 왼쪽부터 차근차근 생성되는 이진 트리를 말함</li>\n</ol>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","categories":["Data Structure"],"date":"May 13, 2020","description":"Data Structure TIL 배운거 정리","id":"317411c9-1086-5188-95d7-bef6888ddfe2","keywords":["Data Structure","TIL"],"slug":"/blog/TIL/2020-05-13-Data-Structure[4Tree]/","title":"Data Structure(Tree) TIL","readingTime":{"text":"5 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}