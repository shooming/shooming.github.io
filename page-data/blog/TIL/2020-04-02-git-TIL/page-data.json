{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/TIL/2020-04-02-git-TIL/","result":{"pageContext":{"article":{"banner":{"alt":"TIL","caption":"Photo by <u><a href=\"https://wonkooklee.github.io/thumbnail_maker/\">Thumbnail Maker</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h661V0H0v200m211-13c0%206%200%207-1%206-10-4-19%203-19%2015s9%2019%2018%2014h4l3%201h2v-44h-7v8m311-8v8c0%207%200%207-2%206-11-4-20%205-19%2018%202%2011%2010%2016%2019%2011%202-2%203-2%203%200l3%201h2v-42c1-2-5-3-6-2m-394%207c0%202%200%202%206%202h6v35h7v-35h6l5-1%201-2c0-2-2-2-15-2h-16v3m171%2017v20h7v-40h-7v20m29%200v20h24v-5h-17v-35h-7v20m-164-8c-11%209-7%2027%207%2029%2014%201%2021-20%209-29-4-4-12-4-16%200m66-2c-3%202-4%203-2%206h4c5-3%207-2%209%200%203%203%202%205-2%205-8%200-15%206-14%2012%202%207%208%2010%2015%206h4l3%201h2v-13c0-12%200-12-3-15s-10-4-16-2m134%200c-10%204-12%2022-3%2028%206%205%2020%203%2018-2%200-2-1-2-2-2-8%203-13%202-15-4l-1-3h20v-3c0-11-8-18-17-14m26%201c-4%201-5%202-3%204%201%202%202%202%205%201%205-3%208-2%2010%200%201%203%201%205-2%205-8%200-15%205-15%2011%200%208%207%2011%2015%207%203-2%204-2%204-1s1%202%203%202h2v-12c0-16-2-19-11-19l-8%202m36%201c-3%202-3%202-3%200s-1-2-3-2h-3v30h7v-10c0-11%202-15%207-15%203%200%204-1%204-5%200-2-6-1-9%202m23-1c-3%202-4%202-4%201l-2-2h-3v30h6v-11c0-12%201-13%206-14%205-2%206%201%206%2014v11h7v-10c0-11-1-17-4-19-3-3-9-2-12%200m31-1c-10%203-12%2021-4%2028%207%205%2023%203%2019-2-1-2-2-2-5-1-4%202-9%200-11-3-3-5-3-5%208-5h10v-3c0-11-8-18-17-14m-226%201l1%203%2010%2027c0%203-5%207-7%207-1-1-2%200-2%202-1%203%201%203%205%203%206-1%208-5%2014-24l7-18-3-1c-4%200-5%201-8%2016l-2%206-4-10c-4-12-4-12-8-12l-3%201m-85%204c-4%201-5%2012-3%2017%203%205%2010%205%2012-1%204-9-2-19-9-16m33%200c-6%203-6%2018%201%2020%205%202%207%200%208-10v-9c-2-1-6-2-9-1m311%200c-3%201-5%206-5%2010%200%209%206%2013%2012%208%202-2%203-15%201-17-2-1-6-2-8-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png","srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/41200/TIL.png 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/f979a/TIL.png 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/bc51f/TIL.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/22602a05cca30b96076a0f50d0b3dd18/322ad/TIL.webp 165w,\n/static/22602a05cca30b96076a0f50d0b3dd18/de3b3/TIL.webp 330w,\n/static/22602a05cca30b96076a0f50d0b3dd18/2b2b5/TIL.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<h1>GIT</h1>\n<h2>GIT의 간단한 개요</h2>\n<p>git은 VCS(version contorl System)로서 소스코드의 버전관리하는 시스템이다.</p>\n<p>보통 협업툴로서 많이 사용한다.</p>\n<p>github은 git으로 Local 저장소에서 파일을 관리를 하게 해주던걸 인터넷에서 여러명이 원격저장소로 관리할 수 있게 해준다.</p>\n<p>기준이 되는 저장소 필요한데 레포지토리라고함.</p>\n<p>만약 github없다면 서버올려서 코드공유해야하고 불편하고 비용도 많이 들었을것이다.</p>\n<p>중앙서버(github)와 local(git)로 구분된다.</p>\n<hr>\n<h2>Git Hub의 사용법</h2>\n<p>일단 git을 사용하기위해서는 git을 사용할 수 있도록 폴더에 설정을 해줘야한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git init</span></span></span></code></pre>\n<p>그 명령어는 <code>git init</code>이다 이 명령어를 사용하면 프로젝트를 git repository로 만들기위해 사용 .git폴더가 생성됨</p>\n<p>GitHub에 있는 자료를 내 로컬 저장소로 복제하려면 clone 해야한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git clone </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">원격저장소 위치</span><span class=\"mtk7\">&gt;</span></span></span></code></pre>\n<p>참고로 <code>git clone</code>을 하면 자동으로 해당 저장소가 폴더채로 다운받아지며 폴더안은 이미 <code>init</code>이 된상태이다.</p>\n<p>git에서 수정된 파일이나 폴더들에는 3가지 상태가 존재한다.</p>\n<ul>\n<li>\n<p>modified - 수정일어나서 변화 감지</p>\n</li>\n<li>\n<p>staged - 중간세이브 commit 되기전에 중간상태 저장하고 문제가 생기면 되돌리기 위해서존재한다. staged상태라면 commit이 가능하다</p>\n</li>\n<li>\n<p>committed - commit이 된상태로 push가 가능한 상태가 된다.</p>\n</li>\n</ul>\n<p>이렇게 3가지 순서가있는데 일단 파일을 수정한다.</p>\n<p>그리고 지금 수정을 다 마치고 현재 상태를 확인해야한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git status</span></span></span></code></pre>\n<p>그때 사용하는 명령어가 <code>git status</code>이다. 해당 명령어를 사용하면 현재 modified상태인지 staged상태인지 알려준다.</p>\n<p>modified 상태라면 staged상태로 만들어야할 것이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git add </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">파일 / 폴더명</span><span class=\"mtk7\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git add </span><span class=\"mtk7\">*</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># 모든 파일, 폴더 선택</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git add </span><span class=\"mtk15\">.</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># 현재폴더 아래 있는 모든 파일 선택</span></span></span></code></pre>\n<p>그때는 <code>git add</code>를 사용하면된다.</p>\n<p>이때 원하지 않은데 add하여 staged된 파일은 <code>git checkout -- \"파일 / 폴더명\"</code>을 쓰면 modified상태가 된다.</p>\n<p>그다음 staged되었으니 commit을 해야할것이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git commit -m </span><span class=\"mtk11\">&quot;메세지 입력&quot;</span></span></span></code></pre>\n<p><code>git commit</code>을 사용하면되고 <code>-m</code> 옵션을 사용하여 바로 뒤에 메세지를 입력한다. 만약 <code>git commit</code>만 사용하게되면 해당 터미널에서 사용하는 기본 편집기가 실행된다.</p>\n<p>이제 committed된 파일 / 폴더를 원격저장소로 보낼것이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git push origin </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">branch명</span><span class=\"mtk7\">&gt;</span></span></span></code></pre>\n<p><code>git push</code>명령어를 사용하면 원격저장소로 파일을 보내줄 수 있다.</p>\n<p>만약 원격저장소에서 최신상태의 버전을 받고싶다면</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git pull</span></span></span></code></pre>\n<p><code>git pull</code>명령어를 사용하면된다.</p>\n<p>아래는 간단한 git 명령어 모음이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git init</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">프로젝트를 git repository로 만들기위해 사용 .git폴더가 생성됨 </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git add</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">옵션 -a 모든파일 선택</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">옵션 </span><span class=\"mtk15\">.</span><span class=\"mtk1\"> 현재폴더 아래 있는 모든 파일 선택</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">modified 파일을 staged 상태로 옮기고자 할 때 사용함.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">add 된 파일들을 메시지 작성하여 커밋함</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git diff</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">modified 상태에서만 나옴 수정사항 보여줌</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git repository의 상태를 보여줌</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git log</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">commit 내역 보여줌 commit history라고도 함</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git rm</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git에 등록된 파일 삭제할때 사용</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git mv</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">파일 위치 옮기거나 이름 바꿀때 사용</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">branch 생성, 삭제, 관리하는 명령어</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git checkout</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">branch 이동할때 사용하는 명령어</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git checkout -- </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">modified파일이름</span><span class=\"mtk7\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">잘못된 add 파일 풀때 -- 다음은 띄어야한다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git clone</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">남의 저장서 퍼올때 사용하고 fork라고도 함</span></span></span></code></pre>\n<hr>\n<h2>branch &#x26; merging</h2>\n<p>소스의 가지라고 한다 새로운 작업할때 branch 만들게 되며,\n기존 소스 영향 안받게하고 안전하게 버전을 관리하게 하기위해 꼭 필요하다. 여러사람이 만들면 언제 바뀔지 알수없지 때문이기 때문이다.\n협업에서 branch명은 <code>feature(원하는 이름)</code>을 보통 사용한다.</p>\n<p>branch에서 작업을 하고 마친다음 pull request(pr)를 하여 master branch에 merge시키는 형태가 된다.</p>\n<p>merge는 branch를 합치는 것을 말하는데 내 master 버전이 update 하려는 저장소의 master버전보다 낮고 수정하려는 부분이 같은 상태라면 conflict된다.</p>\n<p>pull request(pr)을 하게되면 충돌일어 github에서 그 사실을 알려준다. 그럴경우 <code>git pull</code>을 하여 수정이 필요하다고 표시된 부분을 수정하여 다시 <code>git push</code>하면 pull request에 자동적으로 다시 반영한다.</p>\n<p>pull request되면 원격저장소에 branch는 자동적으로 사라지게 되고 local에는 남아있는데 branch의 재사용은 권장되지 않으므로 삭제하고 다시 만드는 것이 좋다.</p>\n<p>git은 local에서 협업은 github에서 한다.</p>\n<h2>.gitignore file</h2>\n<p>git repo의 파일 중 원하지 않는 포함되는 거 막기위해 .gitgnore file 생성해서 그안에 들어가지 않았으면 하는 내용 적음</p>\n<hr>\n<h2>ETC..</h2>\n<p>git mremote add origin 원격저장소 주소\norigin이 기본이고 다르게 작성해도 됨 원격저장소의 별명임(origin)</p>\n<p>touch (파일명).txt\ntouch 파일 생성 명령어</p>\n<p><code>git push origin(리모트 별명) (푸쉬할 브랜치명)</code>\n브랜치상태로 push 가능~</p>\n<p>pull request는 원격저장소에서함 그이유는 conflict 때문임</p>\n<p>브랜치는 사용하고 다시 사용하지 않음 브랜치는 사용 후 버릴것 항상 새로 생성할것</p>\n<p>git pull써서 다른사람 작업한 최신상태 땡겨 온다. <code>git pull origin(원격저장소 별명) master(로컬 브랜치)</code> 라고 치면됨</p>\n<p>tig 치면 바로 브랜치 상태 볼수있음</p>\n<p><code>git branch -d (삭제시킬 브랜치이름)</code></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .mtk11 { color: #22AA44; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","categories":["Git"],"date":"April 02, 2020","description":"Git TIL 배운거 정리","id":"e9caeacf-2491-518b-9c8f-cc9bec629644","keywords":["Git","TIL"],"slug":"/blog/TIL/2020-04-02-git-TIL/","title":"Git TIL","readingTime":{"text":"8 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}