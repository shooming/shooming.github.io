{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/blog/Project/2020-07-09-기업협업2/","result":{"pageContext":{"article":{"banner":null,"body":"<h1>기업협업 두번째 이야기</h1>\n<h2>2주차</h2>\n<p>2주차 부터는 필터링의 싸움이었다. 얼마나 더 정교하게 걸러내는지 맵핑 수치를 높이는 작업이었다. 2주차부터는 우리들은 업무를 나누어 2번째 작업인 카테고리를 먼저 손대게 되었고 나는 컬러작업을 마무리 시키는 것으로 결정되었다.</p>\n<p>하지만 작업을 하던중 몇가지 문제에 직면하게 되었다. 일단 첫번째는 내가 만든 코드는 필터링을 하게되면 분류작업만 50분이 넘어가는 퍼포먼스 이슈와 두번째는 MongoDB가 계속 터지게 되는 이슈가 있었다. ㅠㅠ</p>\n<p>일단 첫번째로 해결을 시작한 것은 퍼포먼스 이슈였다. 2주차부터는 실제 DB를 사용해서 테스트했는데 데이터량이 많아서 시간이 오래 걸려 처음에는 document를 전부 다 가져왔는데 필요한 filed만을 find로 들고 와서 re 모듈을 사용해 정규식을 돌렸다. 이렇게 작업을 하니 가져오는 데이터량이 현저하게 줄어서 용량적인 부담은 해결했지만 300만개가 넘는 데이터를 300가지 색상을 정규을 row by row로 다 정규식을 돌리기 때문에 시간이 오래 걸릴 수 밖에 없었다. 2주차에는 이 문제를 해결하지 못하고 대신 정규식을 활용하여 맵핑률은 높여놓았다.</p>\n<p>그리고 중간중간 터지는 mongoDB 때문에 작업속도는 더뎌졌다. 이때까지는 우리를 담당하는 사수분께서 mongoDB를 삭제하고 다시 설치하고 데이터를 넣는 식으로 했는데 두배로 속도가 느려지게 되었다.</p>\n<p>2주차의 결과는 맵핑 63% 맵핑 불가 19.4% 데이터 없음 17.6% 였다.</p>\n<h2>3주차</h2>\n<p>별다른 소득없이 3주차가 되었다. 카테고리쪽은 생각보다 분류가 복잡해서 어떻게 해야할지 시행착오를 겪으면서 처음부터 다시 작업하길 반복하고 Vue를 작업하던 멤버는 계속 Vue를 사용하여 작업을 하면서 Node.js 셋팅을 하였다. 이때부터 한번씩 돌아가면서 Node.js를 하자고 해서 나는 마지막에 Node.js를 만지게 되었다.</p>\n<p>3주차에는 어느정도 속도문제를 해결할 수 있었다. 우리를 담당하는 사수분의 조언으로 mongoDB aggregate를 사용해 같은 색상정보들을 묶어서 탐색시간을 줄이므로서 50분 걸리던 작업이 전부 다 수행하는데 10분 안쪽으로 들어오게 되면서 시간을 많이 단축할 수 있게되었다. 그래서 그 다음 작업으로 histroy 콜렉션에 맵핑작업결과를 저장하는 mongoDB 쿼리와 실제 DB에 업데이트하는 쿼리를 작성하였다.</p>\n<p>그리고 Python으로 작업을 하게되어 Python + Node.js라는 기이한 형태로 작업을 진행하게 되었는데 우리는 이걸 어떻게 해야할까 고민을 하다가 Node.js에 child process란 기능을 활용하여 Node.js에서 Python을 실행시켰고 Python으로 parametor도 전달가능하게 만들어 놓았다.</p>\n<p>그 와중에 mongoDB는 매번 터지고 있는 중이었다. 그래서 나는 너무 답답하여서 원인을 찾아보기로 했다. 일단 임시적으로 만든 서버라서 우리가 직접 들어가 작업할 수 있는 환경으로 만들어 주신 것 이라서 ssh로 직접 서버에 들어가서 상태를 확인해 보았다. 처음에 담당 사수가 내가 가져올때 데이터를 많이 가져와서 생기는 문제라고 말했지만 더 많은 데이터를 가져오고 더 많이 처리하는 시스템도 분명 있을 것인데 이 정도로 DB가 죽는다는건 말이 안된다고 생각했다. 그래도 혹시 몰라서 서버사양이 낮아서 그런가 싶어서 일단 작업하면서 cpu 사용량 메모리 사용량들 체크하면서 했다. 일단 서버 용령이 16gb 였는데 상주하고 있는 프로그램들이 기본적으로 8gb 이상 차지 하고 있었고 mongoDB로 작업하면서 메모리 사용량이 높아진 다는 것을 확인했다. 혹시 작업하고 나면 메모리가 높아진 상태를 유지한다는 것을 확인했고 혹시 mongoDB가 작업 중 사용한 메모리를 캐시하고 삭제하지 않는 것인지에 대해 의심을 해보게 되었다. 검색결과 나같이 mongoDB 캐시메모리 사용량을 제한하고 싶어하는 사람들이 많았다. 그래서 wiredTriger를 사용하여 mongoDB 캐시메모리 사용량을 3gb로 했는데 이 마저도 다른 프로그램 사용량이 갑자기 높아지면 죽어버려서 그 다음에는 사수분이 1gb로 더 낮게 설정하면서 죽지 않게 되었다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","categories":["Project"],"date":"July 09, 2020","description":"기업협업 후기 정리","id":"cabac0ae-6634-5c41-b348-6d1fcc5b83fa","keywords":["Project","TIL"],"slug":"/blog/Project/2020-07-09-기업협업2/","title":"기업협업 프로젝트 2","readingTime":{"text":"7 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","36698639"]}